{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Asset Management System (Patrimônio)\n\n## Overview\n\nThis is a comprehensive asset management system built for healthcare facilities to track, allocate, and maintain physical assets. The system provides a complete CRUD interface for managing asset classifications, asset registration (tombamento), allocations to health units, transfers between locations, and maintenance tracking. It's designed as a modular application that can be integrated into a parent framework system through configurable routes and parameters.\n\nThe application manages the complete lifecycle of physical assets from initial registration through allocation, transfer, and maintenance, providing detailed tracking and reporting capabilities for healthcare organizations.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Components**: Radix UI primitives with shadcn/ui components for consistent design\n- **Styling**: Tailwind CSS with CSS variables for theming support\n- **Forms**: React Hook Form with Zod validation (via @hookform/resolvers)\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **Database Layer**: Direct PostgreSQL queries using node-postgres (pg) library\n- **File Handling**: Multer for image uploads with file type validation\n- **API Design**: RESTful endpoints following conventional patterns\n- **Development Tools**: tsx for TypeScript execution, esbuild for production builds\n\n### Database Design\n- **Primary Database**: PostgreSQL with schema-based organization (sotech schema)\n- **Connection Management**: Connection pooling via pg.Pool with SSL support\n- **Tables Structure**:\n  - `pat_classificacao`: Asset classifications/categories\n  - `pat_tombamento`: Asset registration with photos and serial tracking  \n  - `pat_alocacao`: Asset allocations to health units and sectors\n  - `pat_transferencia`: Transfer history between locations\n  - `pat_manutencao`: Maintenance tracking and service records\n- **Data Integrity**: Foreign key relationships between assets, locations, and tracking records\n- **File Storage**: JSONB fields for storing photo metadata and file references\n\n### Key Architectural Decisions\n\n**Modular Page Structure**: Each major function (Classifications, Tombamento, Allocations, Transfers, Maintenance) is implemented as a separate page component with its own modal dialogs for CRUD operations. This provides clear separation of concerns and makes the codebase maintainable.\n\n**Direct Database Access**: Uses raw PostgreSQL queries instead of an ORM to maintain direct control over database operations and leverage PostgreSQL-specific features like JSONB for photo storage.\n\n**File Upload Handling**: Images are processed through multer middleware with type validation (JPEG, PNG, WebP) and size limits, storing metadata in JSONB database fields while files are stored in the filesystem.\n\n**State Management Strategy**: TanStack Query handles all server state with automatic caching, background refetching, and optimistic updates. Local component state is used only for UI interactions like modal visibility and form inputs.\n\n**Component Architecture**: Follows a clear hierarchy with Layout → Page → Modal → UI Components, where each modal is responsible for both create and edit operations for its respective entity.\n\n## External Dependencies\n\n### Database Connection\n- **PostgreSQL Server**: External database at db.redeis.com.br:5555\n- **Credentials**: Configured via environment variables with fallback to hardcoded values\n- **Schema**: All tables use the 'sotech' schema prefix\n- **SSL**: Required for external database connections\n\n### UI Component Libraries\n- **Radix UI**: Complete set of unstyled, accessible UI primitives\n- **shadcn/ui**: Pre-built components based on Radix UI with Tailwind styling\n- **Lucide React**: Icon library for consistent iconography\n\n### Development Tools\n- **Vite**: Build tool with React plugin and TypeScript support\n- **Replit Integration**: Development plugins for runtime error overlay and cartographer\n- **PostCSS**: CSS processing with Tailwind CSS and Autoprefixer\n\n### File Processing\n- **Multer**: Multipart form handling for image uploads\n- **File Type Validation**: Restricts uploads to image formats (JPEG, PNG, WebP)\n- **Size Limits**: 10MB maximum file size for uploaded images\n\n### TypeScript Configuration\n- **Module Resolution**: Bundler-style resolution with path aliases\n- **Import Aliases**: @/ for client source, @shared/ for shared types, @assets/ for static files\n- **Strict Mode**: Full TypeScript strict checking enabled","size_bytes":4863},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool } from 'pg';\n\nconst connectionConfig = {\n  host: process.env.PGHOST || 'db.redeis.com.br',\n  port: parseInt(process.env.PGPORT || '5555'),\n  user: process.env.PGUSER || 'sotech',\n  password: process.env.PGPASSWORD || 'SthNox@2022',\n  database: process.env.PGDATABASE || 'dbapr',\n  ssl: true, // Required for external database\n  schema: 'sotech'\n};\n\nexport const pool = new Pool(connectionConfig);\n\n// Test connection\npool.on('connect', () => {\n  console.log('Connected to PostgreSQL database');\n});\n\npool.on('error', (err) => {\n  console.error('Database connection error:', err);\n});\n\n// Helper function to execute queries\nexport async function query(text: string, params?: any[]) {\n  const client = await pool.connect();\n  try {\n    const result = await client.query(text, params);\n    return result;\n  } finally {\n    client.release();\n  }\n}\n\nexport default pool;\n","size_bytes":880},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport multer from \"multer\";\nimport path from \"path\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  dest: 'uploads/',\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = /jpeg|jpg|png|webp/;\n    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n    const mimetype = allowedTypes.test(file.mimetype);\n    \n    if (mimetype && extname) {\n      return cb(null, true);\n    } else {\n      cb(new Error('Apenas imagens são permitidas!'));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Dashboard routes\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error('Error fetching dashboard stats:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  // Classificacao routes\n  app.get(\"/api/classificacoes\", async (req, res) => {\n    try {\n      const classificacoes = await storage.getClassificacoes();\n      res.json(classificacoes);\n    } catch (error) {\n      console.error('Error fetching classificacoes:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  app.get(\"/api/classificacoes/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const classificacao = await storage.getClassificacao(id);\n      \n      if (!classificacao) {\n        return res.status(404).json({ error: 'Classificação não encontrada' });\n      }\n      \n      res.json(classificacao);\n    } catch (error) {\n      console.error('Error fetching classificacao:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  app.post(\"/api/classificacoes\", async (req, res) => {\n    try {\n      const { classificacao, ativo = true } = req.body;\n      \n      if (!classificacao) {\n        return res.status(400).json({ error: 'Nome da classificação é obrigatório' });\n      }\n\n      const newClassificacao = await storage.createClassificacao({\n        classificacao,\n        ativo,\n        fkuser: 0 // Default user\n      });\n      \n      res.status(201).json(newClassificacao);\n    } catch (error) {\n      console.error('Error creating classificacao:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  app.put(\"/api/classificacoes/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updates = req.body;\n      \n      const classificacao = await storage.updateClassificacao(id, updates);\n      res.json(classificacao);\n    } catch (error) {\n      console.error('Error updating classificacao:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  app.delete(\"/api/classificacoes/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteClassificacao(id);\n      \n      if (success) {\n        res.json({ message: 'Classificação excluída com sucesso' });\n      } else {\n        res.status(404).json({ error: 'Classificação não encontrada' });\n      }\n    } catch (error) {\n      console.error('Error deleting classificacao:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  // Produto routes\n  app.get(\"/api/produtos\", async (req, res) => {\n    try {\n      const produtos = await storage.getProdutos();\n      res.json(produtos);\n    } catch (error) {\n      console.error('Error fetching produtos:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  // Tombamento routes\n  app.get(\"/api/tombamentos\", async (req, res) => {\n    try {\n      const tombamentos = await storage.getTombamentos();\n      res.json(tombamentos);\n    } catch (error) {\n      console.error('Error fetching tombamentos:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  app.get(\"/api/tombamentos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const tombamento = await storage.getTombamento(id);\n      \n      if (!tombamento) {\n        return res.status(404).json({ error: 'Tombamento não encontrado' });\n      }\n      \n      res.json(tombamento);\n    } catch (error) {\n      console.error('Error fetching tombamento:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  app.post(\"/api/tombamentos\", upload.array('photos'), async (req, res) => {\n    try {\n      const { fkproduto, tombamento, serial, responsavel, status = 'disponivel' } = req.body;\n      \n      if (!fkproduto || !tombamento) {\n        return res.status(400).json({ error: 'Produto e número de tombamento são obrigatórios' });\n      }\n\n      // Handle uploaded photos\n      let photos = null;\n      if (req.files && Array.isArray(req.files) && req.files.length > 0) {\n        photos = (req.files as Express.Multer.File[]).map(file => ({\n          originalName: file.originalname,\n          filename: file.filename,\n          mimetype: file.mimetype,\n          size: file.size\n        }));\n      }\n\n      const newTombamento = await storage.createTombamento({\n        fkproduto: parseInt(fkproduto),\n        tombamento,\n        serial,\n        photos,\n        responsavel,\n        status,\n        fkuser: 0\n      });\n      \n      res.status(201).json(newTombamento);\n    } catch (error) {\n      console.error('Error creating tombamento:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  app.put(\"/api/tombamentos/:id\", upload.array('photos'), async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updates = { ...req.body };\n      \n      // Handle uploaded photos\n      if (req.files && Array.isArray(req.files) && req.files.length > 0) {\n        updates.photos = (req.files as Express.Multer.File[]).map(file => ({\n          originalName: file.originalname,\n          filename: file.filename,\n          mimetype: file.mimetype,\n          size: file.size\n        }));\n      }\n\n      if (updates.fkproduto) {\n        updates.fkproduto = parseInt(updates.fkproduto);\n      }\n      \n      const tombamento = await storage.updateTombamento(id, updates);\n      res.json(tombamento);\n    } catch (error) {\n      console.error('Error updating tombamento:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  app.delete(\"/api/tombamentos/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteTombamento(id);\n      \n      if (success) {\n        res.json({ message: 'Tombamento excluído com sucesso' });\n      } else {\n        res.status(404).json({ error: 'Tombamento não encontrado' });\n      }\n    } catch (error) {\n      console.error('Error deleting tombamento:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  // Alocacao routes\n  app.get(\"/api/alocacoes\", async (req, res) => {\n    try {\n      const alocacoes = await storage.getAlocacoes();\n      res.json(alocacoes);\n    } catch (error) {\n      console.error('Error fetching alocacoes:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  app.post(\"/api/alocacoes\", upload.array('photos'), async (req, res) => {\n    try {\n      const { fktombamento, fkunidadesaude, fksetor, responsavel_unidade, dataalocacao, termo, responsavel } = req.body;\n      \n      if (!fktombamento || !fkunidadesaude || !responsavel_unidade || !dataalocacao) {\n        return res.status(400).json({ error: 'Tombamento, unidade, responsável e data são obrigatórios' });\n      }\n\n      // Handle uploaded photos\n      let photos = null;\n      if (req.files && Array.isArray(req.files) && req.files.length > 0) {\n        photos = (req.files as Express.Multer.File[]).map(file => ({\n          originalName: file.originalname,\n          filename: file.filename,\n          mimetype: file.mimetype,\n          size: file.size\n        }));\n      }\n\n      const newAlocacao = await storage.createAlocacao({\n        fktombamento: parseInt(fktombamento),\n        fkunidadesaude: parseInt(fkunidadesaude),\n        fksetor: fksetor ? parseInt(fksetor) : undefined,\n        responsavel_unidade,\n        dataalocacao: new Date(dataalocacao),\n        photos,\n        termo,\n        responsavel,\n        fkuser: 0\n      });\n      \n      res.status(201).json(newAlocacao);\n    } catch (error) {\n      console.error('Error creating alocacao:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  app.put(\"/api/alocacoes/:id\", upload.array('photos'), async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updates = { ...req.body };\n      \n      // Handle uploaded photos\n      if (req.files && Array.isArray(req.files) && req.files.length > 0) {\n        updates.photos = (req.files as Express.Multer.File[]).map(file => ({\n          originalName: file.originalname,\n          filename: file.filename,\n          mimetype: file.mimetype,\n          size: file.size\n        }));\n      }\n\n      // Convert string fields to proper types\n      if (updates.fktombamento) updates.fktombamento = parseInt(updates.fktombamento);\n      if (updates.fkunidadesaude) updates.fkunidadesaude = parseInt(updates.fkunidadesaude);\n      if (updates.fksetor) updates.fksetor = parseInt(updates.fksetor);\n      if (updates.dataalocacao) updates.dataalocacao = new Date(updates.dataalocacao);\n\n      const updatedAlocacao = await storage.updateAlocacao(id, updates);\n      res.json(updatedAlocacao);\n    } catch (error) {\n      console.error('Error updating alocacao:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  app.delete(\"/api/alocacoes/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteAlocacao(id);\n      \n      if (success) {\n        res.json({ message: 'Alocação excluída com sucesso' });\n      } else {\n        res.status(404).json({ error: 'Alocação não encontrada' });\n      }\n    } catch (error) {\n      console.error('Error deleting alocacao:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  // Transferencia routes\n  app.get(\"/api/transferencias\", async (req, res) => {\n    try {\n      const transferencias = await storage.getTransferencias();\n      res.json(transferencias);\n    } catch (error) {\n      console.error('Error fetching transferencias:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  app.post(\"/api/transferencias\", async (req, res) => {\n    try {\n      const { fktombamento, fkunidadesaude_origem, fkunidadesaude_destino, fksetor_origem, fksetor_destino, responsavel_destino, datatasnferencia, responsavel } = req.body;\n      \n      if (!fktombamento || !fkunidadesaude_destino || !datatasnferencia) {\n        return res.status(400).json({ error: 'Tombamento, unidade destino e data são obrigatórios' });\n      }\n\n      const newTransferencia = await storage.createTransferencia({\n        fktombamento: parseInt(fktombamento),\n        fkunidadesaude_origem: fkunidadesaude_origem ? parseInt(fkunidadesaude_origem) : undefined,\n        fkunidadesaude_destino: parseInt(fkunidadesaude_destino),\n        fksetor_origem: fksetor_origem ? parseInt(fksetor_origem) : undefined,\n        fksetor_destino,\n        responsavel_destino,\n        datatasnferencia: new Date(datatasnferencia),\n        responsavel,\n        fkuser: 0\n      });\n      \n      res.status(201).json(newTransferencia);\n    } catch (error) {\n      console.error('Error creating transferencia:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  // Manutencao routes\n  app.get(\"/api/manutencoes\", async (req, res) => {\n    try {\n      const manutencoes = await storage.getManutencoes();\n      res.json(manutencoes);\n    } catch (error) {\n      console.error('Error fetching manutencoes:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  app.post(\"/api/manutencoes\", async (req, res) => {\n    try {\n      const { fktombamento, dataretirada, motivo, responsavel, dataretorno } = req.body;\n      \n      if (!fktombamento || !dataretirada || !motivo) {\n        return res.status(400).json({ error: 'Tombamento, data de retirada e motivo são obrigatórios' });\n      }\n\n      const newManutencao = await storage.createManutencao({\n        fktombamento: parseInt(fktombamento),\n        dataretirada: new Date(dataretirada),\n        motivo,\n        responsavel,\n        dataretorno: dataretorno ? new Date(dataretorno) : undefined,\n        fkuser: 0\n      });\n      \n      res.status(201).json(newManutencao);\n    } catch (error) {\n      console.error('Error creating manutencao:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  // Support data routes\n  app.get(\"/api/unidades-saude\", async (req, res) => {\n    try {\n      const unidades = await storage.getUnidadesSaude();\n      res.json(unidades);\n    } catch (error) {\n      console.error('Error fetching unidades:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  app.get(\"/api/setores\", async (req, res) => {\n    try {\n      const setores = await storage.getSetores();\n      res.json(setores);\n    } catch (error) {\n      console.error('Error fetching setores:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":13913},"server/storage.ts":{"content":"import { query } from './db';\nimport { \n  User, \n  InsertUser, \n  Classificacao, \n  InsertClassificacao,\n  Tombamento,\n  InsertTombamento,\n  Alocacao,\n  InsertAlocacao,\n  Transferencia,\n  InsertTransferencia,\n  Manutencao,\n  InsertManutencao,\n  Produto,\n  UnidadeSaude,\n  Setor,\n  DashboardStats\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Classificacao methods\n  getClassificacoes(): Promise<Classificacao[]>;\n  getClassificacao(id: number): Promise<Classificacao | undefined>;\n  createClassificacao(classificacao: InsertClassificacao): Promise<Classificacao>;\n  updateClassificacao(id: number, classificacao: Partial<InsertClassificacao>): Promise<Classificacao>;\n  deleteClassificacao(id: number): Promise<boolean>;\n\n  // Produto methods\n  getProdutos(): Promise<Produto[]>;\n  getProduto(id: number): Promise<Produto | undefined>;\n\n  // Tombamento methods\n  getTombamentos(): Promise<Tombamento[]>;\n  getTombamento(id: number): Promise<Tombamento | undefined>;\n  createTombamento(tombamento: InsertTombamento): Promise<Tombamento>;\n  updateTombamento(id: number, tombamento: Partial<InsertTombamento>): Promise<Tombamento>;\n  deleteTombamento(id: number): Promise<boolean>;\n\n  // Alocacao methods\n  getAlocacoes(): Promise<Alocacao[]>;\n  getAlocacao(id: number): Promise<Alocacao | undefined>;\n  createAlocacao(alocacao: InsertAlocacao): Promise<Alocacao>;\n  updateAlocacao(id: number, alocacao: Partial<InsertAlocacao>): Promise<Alocacao>;\n  deleteAlocacao(id: number): Promise<boolean>;\n\n  // Transferencia methods\n  getTransferencias(): Promise<Transferencia[]>;\n  getTransferencia(id: number): Promise<Transferencia | undefined>;\n  createTransferencia(transferencia: InsertTransferencia): Promise<Transferencia>;\n  updateTransferencia(id: number, transferencia: Partial<InsertTransferencia>): Promise<Transferencia>;\n  deleteTransferencia(id: number): Promise<boolean>;\n\n  // Manutencao methods\n  getManutencoes(): Promise<Manutencao[]>;\n  getManutencao(id: number): Promise<Manutencao | undefined>;\n  createManutencao(manutencao: InsertManutencao): Promise<Manutencao>;\n  updateManutencao(id: number, manutencao: Partial<InsertManutencao>): Promise<Manutencao>;\n  deleteManutencao(id: number): Promise<boolean>;\n\n  // Support data methods\n  getUnidadesSaude(): Promise<UnidadeSaude[]>;\n  getSetores(): Promise<Setor[]>;\n\n  // Dashboard methods\n  getDashboardStats(): Promise<DashboardStats>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await query('SELECT * FROM users WHERE id = $1', [id]);\n    return result.rows[0] || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await query('SELECT * FROM users WHERE username = $1', [username]);\n    return result.rows[0] || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await query(\n      'INSERT INTO users (username, password) VALUES ($1, $2) RETURNING *',\n      [insertUser.username, insertUser.password]\n    );\n    return result.rows[0];\n  }\n\n  // Classificacao methods\n  async getClassificacoes(): Promise<Classificacao[]> {\n    const result = await query('SELECT * FROM sotech.pat_classificacao WHERE ativo = true ORDER BY classificacao');\n    return result.rows;\n  }\n\n  async getClassificacao(id: number): Promise<Classificacao | undefined> {\n    const result = await query('SELECT * FROM sotech.pat_classificacao WHERE pkclassificacao = $1', [id]);\n    return result.rows[0] || undefined;\n  }\n\n  async createClassificacao(classificacao: InsertClassificacao): Promise<Classificacao> {\n    const result = await query(\n      'INSERT INTO sotech.pat_classificacao (classificacao, fkuser, ativo) VALUES ($1, $2, $3) RETURNING *',\n      [classificacao.classificacao, classificacao.fkuser || 0, classificacao.ativo ?? true]\n    );\n    return result.rows[0];\n  }\n\n  async updateClassificacao(id: number, classificacao: Partial<InsertClassificacao>): Promise<Classificacao> {\n    const setClause = Object.keys(classificacao).map((key, index) => `${key} = $${index + 2}`).join(', ');\n    const values = Object.values(classificacao);\n    \n    const result = await query(\n      `UPDATE sotech.pat_classificacao SET ${setClause}, version = version + 1 WHERE pkclassificacao = $1 RETURNING *`,\n      [id, ...values]\n    );\n    return result.rows[0];\n  }\n\n  async deleteClassificacao(id: number): Promise<boolean> {\n    const result = await query('UPDATE sotech.pat_classificacao SET ativo = false WHERE pkclassificacao = $1', [id]);\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Produto methods\n  async getProdutos(): Promise<Produto[]> {\n    const result = await query('SELECT * FROM sotech.est_produto WHERE ativo = true ORDER BY nome');\n    return result.rows;\n  }\n\n  async getProduto(id: number): Promise<Produto | undefined> {\n    const result = await query('SELECT * FROM sotech.est_produto WHERE pkproduto = $1', [id]);\n    return result.rows[0] || undefined;\n  }\n\n  // Tombamento methods\n  async getTombamentos(): Promise<Tombamento[]> {\n    const result = await query(`\n      SELECT t.*, p.nome as produto_nome, p.descricao as produto_descricao\n      FROM sotech.pat_tombamento t\n      LEFT JOIN sotech.est_produto p ON t.fkproduto = p.pkproduto\n      WHERE t.ativo = true \n      ORDER BY t.created_at DESC\n    `);\n    \n    return result.rows.map(row => ({\n      ...row,\n      produto: row.produto_nome ? {\n        pkproduto: row.fkproduto,\n        nome: row.produto_nome,\n        descricao: row.produto_descricao\n      } : undefined\n    }));\n  }\n\n  async getTombamento(id: number): Promise<Tombamento | undefined> {\n    const result = await query(`\n      SELECT t.*, p.nome as produto_nome, p.descricao as produto_descricao\n      FROM sotech.pat_tombamento t\n      LEFT JOIN sotech.est_produto p ON t.fkproduto = p.pkproduto\n      WHERE t.pktombamento = $1\n    `, [id]);\n    \n    if (!result.rows[0]) return undefined;\n    \n    const row = result.rows[0];\n    return {\n      ...row,\n      produto: row.produto_nome ? {\n        pkproduto: row.fkproduto,\n        nome: row.produto_nome,\n        descricao: row.produto_descricao\n      } : undefined\n    };\n  }\n\n  async createTombamento(tombamento: InsertTombamento): Promise<Tombamento> {\n    const result = await query(`\n      INSERT INTO sotech.pat_tombamento \n      (fkproduto, tombamento, serial, photos, responsavel, status, fkuser) \n      VALUES ($1, $2, $3, $4, $5, $6, $7) \n      RETURNING *\n    `, [\n      tombamento.fkproduto,\n      tombamento.tombamento,\n      tombamento.serial,\n      tombamento.photos ? JSON.stringify(tombamento.photos) : null,\n      tombamento.responsavel,\n      tombamento.status || 'disponivel',\n      tombamento.fkuser || 0\n    ]);\n    return result.rows[0];\n  }\n\n  async updateTombamento(id: number, tombamento: Partial<InsertTombamento>): Promise<Tombamento> {\n    const fields: string[] = [];\n    const values: any[] = [];\n    let paramCount = 1;\n\n    Object.entries(tombamento).forEach(([key, value]) => {\n      if (value !== undefined) {\n        fields.push(`${key} = $${++paramCount}`);\n        values.push(key === 'photos' && value ? JSON.stringify(value) : value);\n      }\n    });\n\n    if (fields.length === 0) {\n      throw new Error('No fields to update');\n    }\n\n    const result = await query(`\n      UPDATE sotech.pat_tombamento \n      SET ${fields.join(', ')}, version = version + 1 \n      WHERE pktombamento = $1 \n      RETURNING *\n    `, [id, ...values]);\n    \n    return result.rows[0];\n  }\n\n  async deleteTombamento(id: number): Promise<boolean> {\n    const result = await query('UPDATE sotech.pat_tombamento SET ativo = false WHERE pktombamento = $1', [id]);\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Alocacao methods\n  async getAlocacoes(): Promise<Alocacao[]> {\n    const result = await query(`\n      SELECT a.*, \n             t.tombamento, t.serial,\n             p.nome as produto_nome,\n             u.nome as unidade_nome,\n             s.nome as setor_nome\n      FROM sotech.pat_alocacao a\n      LEFT JOIN sotech.pat_tombamento t ON a.fktombamento = t.pktombamento\n      LEFT JOIN sotech.est_produto p ON t.fkproduto = p.pkproduto\n      LEFT JOIN sotech.cdg_unidadesaude u ON a.fkunidadesaude = u.pkunidadesaude\n      LEFT JOIN sotech.cdg_setor s ON a.fksetor = s.pksetor\n      WHERE a.ativo = true \n      ORDER BY a.created_at DESC\n    `);\n    \n    return result.rows.map(row => ({\n      ...row,\n      tombamento: row.tombamento ? {\n        pktombamento: row.fktombamento,\n        tombamento: row.tombamento,\n        serial: row.serial,\n        produto: row.produto_nome ? { nome: row.produto_nome } : undefined\n      } : undefined,\n      unidadesaude: row.unidade_nome ? { nome: row.unidade_nome } : undefined,\n      setor: row.setor_nome ? { nome: row.setor_nome } : undefined\n    }));\n  }\n\n  async getAlocacao(id: number): Promise<Alocacao | undefined> {\n    const result = await query('SELECT * FROM sotech.pat_alocacao WHERE pkalocacao = $1', [id]);\n    return result.rows[0] || undefined;\n  }\n\n  async createAlocacao(alocacao: InsertAlocacao): Promise<Alocacao> {\n    const result = await query(`\n      INSERT INTO sotech.pat_alocacao \n      (fktombamento, fkunidadesaude, fksetor, responsavel_unidade, dataalocacao, photos, termo, responsavel, fkuser) \n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) \n      RETURNING *\n    `, [\n      alocacao.fktombamento,\n      alocacao.fkunidadesaude,\n      alocacao.fksetor,\n      alocacao.responsavel_unidade,\n      alocacao.dataalocacao,\n      alocacao.photos ? JSON.stringify(alocacao.photos) : null,\n      alocacao.termo,\n      alocacao.responsavel,\n      alocacao.fkuser || 0\n    ]);\n\n    // Update tombamento status to 'alocado'\n    await query('UPDATE sotech.pat_tombamento SET status = $1 WHERE pktombamento = $2', ['alocado', alocacao.fktombamento]);\n\n    return result.rows[0];\n  }\n\n  async updateAlocacao(id: number, alocacao: Partial<InsertAlocacao>): Promise<Alocacao> {\n    const fields: string[] = [];\n    const values: any[] = [];\n    let paramCount = 1;\n\n    Object.entries(alocacao).forEach(([key, value]) => {\n      if (value !== undefined) {\n        fields.push(`${key} = $${++paramCount}`);\n        values.push(key === 'photos' && value ? JSON.stringify(value) : value);\n      }\n    });\n\n    const result = await query(`\n      UPDATE sotech.pat_alocacao \n      SET ${fields.join(', ')}, version = version + 1 \n      WHERE pkalocacao = $1 \n      RETURNING *\n    `, [id, ...values]);\n    \n    return result.rows[0];\n  }\n\n  async deleteAlocacao(id: number): Promise<boolean> {\n    // Get the tombamento ID before deleting\n    const alocacao = await this.getAlocacao(id);\n    if (alocacao) {\n      // Update tombamento status back to 'disponivel'\n      await query('UPDATE sotech.pat_tombamento SET status = $1 WHERE pktombamento = $2', ['disponivel', alocacao.fktombamento]);\n    }\n\n    const result = await query('UPDATE sotech.pat_alocacao SET ativo = false WHERE pkalocacao = $1', [id]);\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Transferencia methods\n  async getTransferencias(): Promise<Transferencia[]> {\n    const result = await query(`\n      SELECT tr.*, \n             t.tombamento,\n             p.nome as produto_nome,\n             uo.nome as unidade_origem_nome,\n             ud.nome as unidade_destino_nome\n      FROM sotech.pat_transferencia tr\n      LEFT JOIN sotech.pat_tombamento t ON tr.fktombamento = t.pktombamento\n      LEFT JOIN sotech.est_produto p ON t.fkproduto = p.pkproduto\n      LEFT JOIN sotech.cdg_unidadesaude uo ON tr.fkunidadesaude_origem = uo.pkunidadesaude\n      LEFT JOIN sotech.cdg_unidadesaude ud ON tr.fkunidadesaude_destino = ud.pkunidadesaude\n      WHERE tr.ativo = true \n      ORDER BY tr.created_at DESC\n    `);\n    \n    return result.rows.map(row => ({\n      ...row,\n      tombamento: row.tombamento ? {\n        tombamento: row.tombamento,\n        produto: row.produto_nome ? { nome: row.produto_nome } : undefined\n      } : undefined,\n      unidade_origem: row.unidade_origem_nome ? { nome: row.unidade_origem_nome } : undefined,\n      unidade_destino: row.unidade_destino_nome ? { nome: row.unidade_destino_nome } : undefined\n    }));\n  }\n\n  async getTransferencia(id: number): Promise<Transferencia | undefined> {\n    const result = await query('SELECT * FROM sotech.pat_transferencia WHERE pktransferencia = $1', [id]);\n    return result.rows[0] || undefined;\n  }\n\n  async createTransferencia(transferencia: InsertTransferencia): Promise<Transferencia> {\n    const result = await query(`\n      INSERT INTO sotech.pat_transferencia \n      (fktombamento, fkunidadesaude_origem, fkunidadesaude_destino, fksetor_origem, fksetor_destino, responsavel_destino, datatasnferencia, responsavel, fkuser) \n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) \n      RETURNING *\n    `, [\n      transferencia.fktombamento,\n      transferencia.fkunidadesaude_origem,\n      transferencia.fkunidadesaude_destino,\n      transferencia.fksetor_origem,\n      transferencia.fksetor_destino,\n      transferencia.responsavel_destino,\n      transferencia.datatasnferencia,\n      transferencia.responsavel,\n      transferencia.fkuser || 0\n    ]);\n\n    return result.rows[0];\n  }\n\n  async updateTransferencia(id: number, transferencia: Partial<InsertTransferencia>): Promise<Transferencia> {\n    const fields: string[] = [];\n    const values: any[] = [];\n    let paramCount = 1;\n\n    Object.entries(transferencia).forEach(([key, value]) => {\n      if (value !== undefined) {\n        fields.push(`${key} = $${++paramCount}`);\n        values.push(value);\n      }\n    });\n\n    const result = await query(`\n      UPDATE sotech.pat_transferencia \n      SET ${fields.join(', ')}, version = version + 1 \n      WHERE pktransferencia = $1 \n      RETURNING *\n    `, [id, ...values]);\n    \n    return result.rows[0];\n  }\n\n  async deleteTransferencia(id: number): Promise<boolean> {\n    const result = await query('UPDATE sotech.pat_transferencia SET ativo = false WHERE pktransferencia = $1', [id]);\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Manutencao methods\n  async getManutencoes(): Promise<Manutencao[]> {\n    const result = await query(`\n      SELECT m.*, \n             t.tombamento,\n             p.nome as produto_nome\n      FROM sotech.pat_manutencao m\n      LEFT JOIN sotech.pat_tombamento t ON m.fktombamento = t.pktombamento\n      LEFT JOIN sotech.est_produto p ON t.fkproduto = p.pkproduto\n      WHERE m.ativo = true \n      ORDER BY m.created_at DESC\n    `);\n    \n    return result.rows.map(row => ({\n      ...row,\n      tombamento: row.tombamento ? {\n        tombamento: row.tombamento,\n        produto: row.produto_nome ? { nome: row.produto_nome } : undefined\n      } : undefined\n    }));\n  }\n\n  async getManutencao(id: number): Promise<Manutencao | undefined> {\n    const result = await query('SELECT * FROM sotech.pat_manutencao WHERE pkmanutencao = $1', [id]);\n    return result.rows[0] || undefined;\n  }\n\n  async createManutencao(manutencao: InsertManutencao): Promise<Manutencao> {\n    const result = await query(`\n      INSERT INTO sotech.pat_manutencao \n      (fktombamento, dataretirada, motivo, responsavel, dataretorno, fkuser) \n      VALUES ($1, $2, $3, $4, $5, $6) \n      RETURNING *\n    `, [\n      manutencao.fktombamento,\n      manutencao.dataretirada,\n      manutencao.motivo,\n      manutencao.responsavel,\n      manutencao.dataretorno,\n      manutencao.fkuser || 0\n    ]);\n\n    // Update tombamento status to 'manutencao'\n    await query('UPDATE sotech.pat_tombamento SET status = $1 WHERE pktombamento = $2', ['manutencao', manutencao.fktombamento]);\n\n    return result.rows[0];\n  }\n\n  async updateManutencao(id: number, manutencao: Partial<InsertManutencao>): Promise<Manutencao> {\n    const fields: string[] = [];\n    const values: any[] = [];\n    let paramCount = 1;\n\n    Object.entries(manutencao).forEach(([key, value]) => {\n      if (value !== undefined) {\n        fields.push(`${key} = $${++paramCount}`);\n        values.push(value);\n      }\n    });\n\n    const result = await query(`\n      UPDATE sotech.pat_manutencao \n      SET ${fields.join(', ')}, version = version + 1 \n      WHERE pkmanutencao = $1 \n      RETURNING *\n    `, [id, ...values]);\n    \n    return result.rows[0];\n  }\n\n  async deleteManutencao(id: number): Promise<boolean> {\n    // Get the tombamento ID before deleting\n    const manutencao = await this.getManutencao(id);\n    if (manutencao) {\n      // Update tombamento status back to 'disponivel'\n      await query('UPDATE sotech.pat_tombamento SET status = $1 WHERE pktombamento = $2', ['disponivel', manutencao.fktombamento]);\n    }\n\n    const result = await query('UPDATE sotech.pat_manutencao SET ativo = false WHERE pkmanutencao = $1', [id]);\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Support data methods\n  async getUnidadesSaude(): Promise<UnidadeSaude[]> {\n    const result = await query('SELECT * FROM sotech.cdg_unidadesaude WHERE ativo = true ORDER BY nome');\n    return result.rows;\n  }\n\n  async getSetores(): Promise<Setor[]> {\n    const result = await query('SELECT * FROM sotech.cdg_setor WHERE ativo = true ORDER BY nome');\n    return result.rows;\n  }\n\n  // Dashboard methods\n  async getDashboardStats(): Promise<DashboardStats> {\n    const totalResult = await query('SELECT COUNT(*) as total FROM sotech.pat_tombamento WHERE ativo = true');\n    const availableResult = await query('SELECT COUNT(*) as total FROM sotech.pat_tombamento WHERE ativo = true AND status = $1', ['disponivel']);\n    const allocatedResult = await query('SELECT COUNT(*) as total FROM sotech.pat_tombamento WHERE ativo = true AND status = $1', ['alocado']);\n    const maintenanceResult = await query('SELECT COUNT(*) as total FROM sotech.pat_tombamento WHERE ativo = true AND status = $1', ['manutencao']);\n\n    return {\n      totalItems: parseInt(totalResult.rows[0].total),\n      available: parseInt(availableResult.rows[0].total),\n      allocated: parseInt(allocatedResult.rows[0].total),\n      maintenance: parseInt(maintenanceResult.rows[0].total)\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":18335},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"// Schema definitions for patrimonio system\nexport interface Classificacao {\n  pkclassificacao: number;\n  classificacao: string;\n  fkuser: number;\n  version: number;\n  ativo: boolean;\n  uuid: string;\n  created_at: Date;\n}\n\nexport interface InsertClassificacao {\n  classificacao: string;\n  fkuser?: number;\n  ativo?: boolean;\n}\n\nexport interface Produto {\n  pkproduto: number;\n  nome: string;\n  descricao?: string;\n  pkclassificacao?: number;\n  ativo: boolean;\n  created_at: Date;\n}\n\nexport interface Tombamento {\n  pktombamento: number;\n  fkproduto: number;\n  tombamento: string;\n  serial?: string;\n  photos?: any; // JSONB\n  responsavel?: string;\n  status: 'disponivel' | 'alocado' | 'manutencao';\n  fkuser: number;\n  version: number;\n  ativo: boolean;\n  uuid: string;\n  created_at: Date;\n  produto?: Produto;\n}\n\nexport interface InsertTombamento {\n  fkproduto: number;\n  tombamento: string;\n  serial?: string;\n  photos?: any;\n  responsavel?: string;\n  status?: 'disponivel' | 'alocado' | 'manutencao';\n  fkuser?: number;\n}\n\nexport interface UnidadeSaude {\n  pkunidadesaude: number;\n  nome: string;\n  endereco?: string;\n  ativo: boolean;\n  created_at: Date;\n}\n\nexport interface Setor {\n  pksetor: number;\n  nome: string;\n  fkunidadesaude?: number;\n  ativo: boolean;\n  created_at: Date;\n}\n\nexport interface Alocacao {\n  pkalocacao: number;\n  fktombamento: number;\n  fkunidadesaude: number;\n  fksetor?: number;\n  responsavel_unidade: string;\n  dataalocacao: Date;\n  photos?: any;\n  termo?: string;\n  responsavel?: string;\n  fkuser: number;\n  version: number;\n  ativo: boolean;\n  uuid: string;\n  created_at: Date;\n  tombamento?: Tombamento;\n  unidadesaude?: UnidadeSaude;\n  setor?: Setor;\n}\n\nexport interface InsertAlocacao {\n  fktombamento: number;\n  fkunidadesaude: number;\n  fksetor?: number;\n  responsavel_unidade: string;\n  dataalocacao: Date;\n  photos?: any;\n  termo?: string;\n  responsavel?: string;\n  fkuser?: number;\n}\n\nexport interface Transferencia {\n  pktransferencia: number;\n  fktombamento: number;\n  fkunidadesaude_origem?: number;\n  fkunidadesaude_destino?: number;\n  fksetor_origem?: number;\n  fksetor_destino?: string;\n  responsavel_destino?: string;\n  datatasnferencia: Date;\n  responsavel?: string;\n  fkuser: number;\n  version: number;\n  ativo: boolean;\n  uuid: string;\n  created_at: Date;\n  tombamento?: Tombamento;\n  unidade_origem?: UnidadeSaude;\n  unidade_destino?: UnidadeSaude;\n}\n\nexport interface InsertTransferencia {\n  fktombamento: number;\n  fkunidadesaude_origem?: number;\n  fkunidadesaude_destino?: number;\n  fksetor_origem?: number;\n  fksetor_destino?: string;\n  responsavel_destino?: string;\n  datatasnferencia: Date;\n  responsavel?: string;\n  fkuser?: number;\n}\n\nexport interface Manutencao {\n  pkmanutencao: number;\n  fktombamento: number;\n  dataretirada: Date;\n  motivo: string;\n  responsavel?: string;\n  dataretorno?: Date;\n  fkuser: number;\n  version: number;\n  ativo: boolean;\n  uuid: string;\n  created_at: Date;\n  tombamento?: Tombamento;\n}\n\nexport interface InsertManutencao {\n  fktombamento: number;\n  dataretirada: Date;\n  motivo: string;\n  responsavel?: string;\n  dataretorno?: Date;\n  fkuser?: number;\n}\n\nexport interface User {\n  id: string;\n  username: string;\n  password: string;\n}\n\nexport interface InsertUser {\n  username: string;\n  password: string;\n}\n\n// Dashboard stats interface\nexport interface DashboardStats {\n  totalItems: number;\n  available: number;\n  allocated: number;\n  maintenance: number;\n}\n","size_bytes":3455},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Layout from \"@/components/Layout\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Classificacoes from \"@/pages/Classificacoes\";\nimport Tombamento from \"@/pages/Tombamento\";\nimport Alocacao from \"@/pages/Alocacao\";\nimport Transferencia from \"@/pages/Transferencia\";\nimport Manutencao from \"@/pages/Manutencao\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/classificacoes\" component={Classificacoes} />\n        <Route path=\"/tombamento\" component={Tombamento} />\n        <Route path=\"/alocacao\" component={Alocacao} />\n        <Route path=\"/transferencia\" component={Transferencia} />\n        <Route path=\"/manutencao\" component={Manutencao} />\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1336},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222, 47%, 11%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 47%, 11%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 47%, 11%);\n  --primary: hsl(210, 100%, 45%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(220, 15%, 45%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(220, 9%, 46%);\n  --accent: hsl(145, 65%, 45%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 75%, 55%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(220, 13%, 91%);\n  --input: hsl(220, 13%, 91%);\n  --ring: hsl(210, 100%, 45%);\n  --chart-1: hsl(210, 100%, 45%);\n  --chart-2: hsl(145, 65%, 45%);\n  --chart-3: hsl(42, 92%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(180, 7%, 97%);\n  --sidebar-foreground: hsl(222, 47%, 11%);\n  --sidebar-primary: hsl(210, 100%, 45%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(210, 100%, 45%);\n  --sidebar-border: hsl(220, 13%, 91%);\n  --sidebar-ring: hsl(210, 100%, 45%);\n  --font-sans: 'Inter', 'ui-sans-serif', 'system-ui';\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(210, 100%, 45%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(210, 100%, 45%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(210, 100%, 45%, 0.00), 0px 1px 2px -1px hsl(210, 100%, 45%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(210, 100%, 45%, 0.00), 0px 1px 2px -1px hsl(210, 100%, 45%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(210, 100%, 45%, 0.00), 0px 2px 4px -1px hsl(210, 100%, 45%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(210, 100%, 45%, 0.00), 0px 4px 6px -1px hsl(210, 100%, 45%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(210, 100%, 45%, 0.00), 0px 8px 10px -1px hsl(210, 100%, 45%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210, 100%, 45%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 7%, 91%);\n  --card: hsl(228, 10%, 10%);\n  --card-foreground: hsl(0, 0%, 85%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 7%, 91%);\n  --primary: hsl(210, 88%, 52%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195, 15%, 95%);\n  --secondary-foreground: hsl(222, 47%, 11%);\n  --muted: hsl(0, 0%, 9%);\n  --muted-foreground: hsl(210, 3%, 46%);\n  --accent: hsl(206, 70%, 8%);\n  --accent-foreground: hsl(210, 88%, 52%);\n  --destructive: hsl(0, 75%, 55%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5%, 15%);\n  --input: hsl(208, 28%, 18%);\n  --ring: hsl(210, 100%, 45%);\n  --chart-1: hsl(210, 100%, 45%);\n  --chart-2: hsl(145, 65%, 45%);\n  --chart-3: hsl(42, 92%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(228, 10%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85%);\n  --sidebar-primary: hsl(210, 100%, 45%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(206, 70%, 8%);\n  --sidebar-accent-foreground: hsl(210, 88%, 52%);\n  --sidebar-border: hsl(206, 16%, 26%);\n  --sidebar-ring: hsl(210, 100%, 45%);\n  --font-sans: 'Inter', 'ui-sans-serif', 'system-ui';\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(210, 100%, 45%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(210, 100%, 45%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(210, 100%, 45%, 0.00), 0px 1px 2px -1px hsl(210, 100%, 45%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(210, 100%, 45%, 0.00), 0px 1px 2px -1px hsl(210, 100%, 45%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(210, 100%, 45%, 0.00), 0px 2px 4px -1px hsl(210, 100%, 45%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(210, 100%, 45%, 0.00), 0px 4px 6px -1px hsl(210, 100%, 45%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(210, 100%, 45%, 0.00), 0px 8px 10px -1px hsl(210, 100%, 45%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210, 100%, 45%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n","size_bytes":4286},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Header.tsx":{"content":"import { useLocation } from \"wouter\";\n\nconst sectionNames: Record<string, string> = {\n  \"/\": \"Dashboard\",\n  \"/classificacoes\": \"Classificações\",\n  \"/tombamento\": \"Tombamento\",\n  \"/alocacao\": \"Alocação\",\n  \"/transferencia\": \"Transferências\",\n  \"/manutencao\": \"Manutenção\",\n};\n\nexport default function Header() {\n  const [location] = useLocation();\n  const currentSection = sectionNames[location] || \"Dashboard\";\n\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\" data-testid=\"header\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <nav className=\"flex\" aria-label=\"Breadcrumb\">\n            <ol className=\"flex items-center space-x-2\">\n              <li>\n                <div className=\"flex items-center\">\n                  <svg className=\"flex-shrink-0 h-4 w-4 text-muted-foreground\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path d=\"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\"/>\n                  </svg>\n                </div>\n              </li>\n              <li>\n                <div className=\"flex items-center\">\n                  <svg className=\"flex-shrink-0 h-4 w-4 text-muted-foreground\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\"/>\n                  </svg>\n                  <span className=\"ml-2 text-sm font-medium text-foreground\" data-testid=\"current-section\">\n                    {currentSection}\n                  </span>\n                </div>\n              </li>\n            </ol>\n          </nav>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          {/* Search Bar */}\n          <div className=\"relative\">\n            <input \n              type=\"text\" \n              placeholder=\"Pesquisar patrimônio...\" \n              className=\"w-64 pl-10 pr-4 py-2 border border-input rounded-md focus:ring-2 focus:ring-ring focus:border-transparent text-sm\"\n              data-testid=\"search-input\"\n            />\n            <svg className=\"absolute left-3 top-2.5 h-4 w-4 text-muted-foreground\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"/>\n            </svg>\n          </div>\n          {/* Notifications */}\n          <button className=\"relative p-2 text-muted-foreground hover:text-foreground\" data-testid=\"notifications-button\">\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 17h5l-6.5-6.5L8 16\"/>\n            </svg>\n            <span className=\"absolute top-0 right-0 h-2 w-2 bg-destructive rounded-full\"></span>\n          </button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3116},"client/src/components/Layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport Header from \"./Header\";\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header />\n        <div className=\"flex-1 overflow-auto bg-background\">\n          {children}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":499},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\n\nconst navigationItems = [\n  {\n    name: \"Dashboard\",\n    href: \"/\",\n    icon: (\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z\"/>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M8 5a2 2 0 012-2h4a2 2 0 012 2v6H8V5z\"/>\n      </svg>\n    ),\n  },\n  {\n    name: \"Classificações\",\n    href: \"/classificacoes\",\n    icon: (\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\"/>\n      </svg>\n    ),\n  },\n  {\n    name: \"Tombamento\",\n    href: \"/tombamento\",\n    icon: (\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"/>\n      </svg>\n    ),\n  },\n  {\n    name: \"Alocação\",\n    href: \"/alocacao\",\n    icon: (\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"/>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"/>\n      </svg>\n    ),\n  },\n  {\n    name: \"Transferências\",\n    href: \"/transferencia\",\n    icon: (\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4\"/>\n      </svg>\n    ),\n  },\n  {\n    name: \"Manutenção\",\n    href: \"/manutencao\",\n    icon: (\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"/>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"/>\n      </svg>\n    ),\n  },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"w-64 bg-card border-r border-border flex flex-col shadow-sm\" data-testid=\"sidebar\">\n      {/* Logo Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <svg className=\"w-5 h-5 text-primary-foreground\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path d=\"M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z\"/>\n            </svg>\n          </div>\n          <div>\n            <h1 className=\"text-lg font-semibold text-foreground\">PatriSaúde</h1>\n            <p className=\"text-xs text-muted-foreground\">Gestão de Patrimônio</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navigationItems.map((item) => {\n          const isActive = location === item.href;\n          return (\n            <Link\n              key={item.href}\n              href={item.href}\n              className={cn(\n                \"w-full flex items-center space-x-3 px-3 py-2 rounded-md text-sm font-medium transition-colors\",\n                isActive\n                  ? \"bg-muted text-foreground\"\n                  : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n              )}\n              data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              {item.icon}\n              <span>{item.name}</span>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* User Info Footer */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n            <svg className=\"w-4 h-4 text-secondary-foreground\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\" clipRule=\"evenodd\"/>\n            </svg>\n          </div>\n          <div>\n            <p className=\"text-sm font-medium text-foreground\">Admin Sistema</p>\n            <p className=\"text-xs text-muted-foreground\">Gestão Patrimonial</p>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":5347},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/usePatrimonio.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Dashboard hooks\nexport function useDashboardStats() {\n  return useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    queryFn: async () => {\n      const response = await api.getDashboardStats();\n      return response.json();\n    },\n  });\n}\n\n// Classificacoes hooks\nexport function useClassificacoes() {\n  return useQuery({\n    queryKey: [\"/api/classificacoes\"],\n    queryFn: async () => {\n      const response = await api.getClassificacoes();\n      return response.json();\n    },\n  });\n}\n\nexport function useCreateClassificacao() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (data: any) => {\n      const response = await api.createClassificacao(data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/classificacoes\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Classificação criada com sucesso\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao criar classificação\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useUpdateClassificacao() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      const response = await api.updateClassificacao(id, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/classificacoes\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Classificação atualizada com sucesso\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar classificação\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useDeleteClassificacao() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (id: number) => {\n      const response = await api.deleteClassificacao(id);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/classificacoes\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Classificação excluída com sucesso\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao excluir classificação\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Produtos hooks\nexport function useProdutos() {\n  return useQuery({\n    queryKey: [\"/api/produtos\"],\n    queryFn: async () => {\n      const response = await api.getProdutos();\n      return response.json();\n    },\n  });\n}\n\n// Tombamentos hooks\nexport function useTombamentos() {\n  return useQuery({\n    queryKey: [\"/api/tombamentos\"],\n    queryFn: async () => {\n      const response = await api.getTombamentos();\n      return response.json();\n    },\n  });\n}\n\nexport function useCreateTombamento() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (formData: FormData) => {\n      const response = await api.createTombamento(formData);\n      if (!response.ok) {\n        throw new Error(\"Erro ao criar tombamento\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tombamentos\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Tombamento criado com sucesso\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao criar tombamento\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useUpdateTombamento() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async ({ id, formData }: { id: number, formData: FormData }) => {\n      const response = await api.updateTombamento(id, formData);\n      if (!response.ok) {\n        throw new Error(\"Erro ao atualizar tombamento\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tombamentos\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Tombamento atualizado com sucesso\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar tombamento\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Alocacoes hooks\nexport function useAlocacoes() {\n  return useQuery({\n    queryKey: [\"/api/alocacoes\"],\n    queryFn: async () => {\n      const response = await api.getAlocacoes();\n      return response.json();\n    },\n  });\n}\n\nexport function useCreateAlocacao() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (formData: FormData) => {\n      const response = await api.createAlocacao(formData);\n      if (!response.ok) {\n        throw new Error(\"Erro ao criar alocação\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/alocacoes\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tombamentos\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Alocação criada com sucesso\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao criar alocação\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useUpdateAlocacao() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async ({ id, formData }: { id: number, formData: FormData }) => {\n      const response = await api.updateAlocacao(id, formData);\n      if (!response.ok) {\n        throw new Error(\"Erro ao atualizar alocação\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/alocacoes\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tombamentos\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Alocação atualizada com sucesso\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar alocação\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useDeleteAlocacao() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (id: number) => {\n      const response = await api.deleteAlocacao(id);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/alocacoes\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tombamentos\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Alocação excluída com sucesso\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao excluir alocação\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Transferencias hooks\nexport function useTransferencias() {\n  return useQuery({\n    queryKey: [\"/api/transferencias\"],\n    queryFn: async () => {\n      const response = await api.getTransferencias();\n      return response.json();\n    },\n  });\n}\n\nexport function useCreateTransferencia() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (data: any) => {\n      const response = await api.createTransferencia(data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/transferencias\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/alocacoes\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Transferência criada com sucesso\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao criar transferência\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Manutencoes hooks\nexport function useManutencoes() {\n  return useQuery({\n    queryKey: [\"/api/manutencoes\"],\n    queryFn: async () => {\n      const response = await api.getManutencoes();\n      return response.json();\n    },\n  });\n}\n\nexport function useCreateManutencao() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (data: any) => {\n      const response = await api.createManutencao(data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/manutencoes\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tombamentos\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Manutenção criada com sucesso\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao criar manutenção\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Support data hooks\nexport function useUnidadesSaude() {\n  return useQuery({\n    queryKey: [\"/api/unidades-saude\"],\n    queryFn: async () => {\n      const response = await api.getUnidadesSaude();\n      return response.json();\n    },\n  });\n}\n\nexport function useSetores() {\n  return useQuery({\n    queryKey: [\"/api/setores\"],\n    queryFn: async () => {\n      const response = await api.getSetores();\n      return response.json();\n    },\n  });\n}\n","size_bytes":10114},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\n// API endpoints for patrimonio system\nexport const api = {\n  // Dashboard\n  getDashboardStats: () => apiRequest(\"GET\", \"/api/dashboard/stats\"),\n\n  // Classificacoes\n  getClassificacoes: () => apiRequest(\"GET\", \"/api/classificacoes\"),\n  getClassificacao: (id: number) => apiRequest(\"GET\", `/api/classificacoes/${id}`),\n  createClassificacao: (data: any) => apiRequest(\"POST\", \"/api/classificacoes\", data),\n  updateClassificacao: (id: number, data: any) => apiRequest(\"PUT\", `/api/classificacoes/${id}`, data),\n  deleteClassificacao: (id: number) => apiRequest(\"DELETE\", `/api/classificacoes/${id}`),\n\n  // Produtos\n  getProdutos: () => apiRequest(\"GET\", \"/api/produtos\"),\n\n  // Tombamentos\n  getTombamentos: () => apiRequest(\"GET\", \"/api/tombamentos\"),\n  getTombamento: (id: number) => apiRequest(\"GET\", `/api/tombamentos/${id}`),\n  createTombamento: (formData: FormData) => {\n    return fetch(\"/api/tombamentos\", {\n      method: \"POST\",\n      body: formData,\n      credentials: \"include\",\n    });\n  },\n  updateTombamento: (id: number, formData: FormData) => {\n    return fetch(`/api/tombamentos/${id}`, {\n      method: \"PUT\",\n      body: formData,\n      credentials: \"include\",\n    });\n  },\n  deleteTombamento: (id: number) => apiRequest(\"DELETE\", `/api/tombamentos/${id}`),\n\n  // Alocacoes\n  getAlocacoes: () => apiRequest(\"GET\", \"/api/alocacoes\"),\n  createAlocacao: (formData: FormData) => {\n    return fetch(\"/api/alocacoes\", {\n      method: \"POST\",\n      body: formData,\n      credentials: \"include\",\n    });\n  },\n  updateAlocacao: (id: number, formData: FormData) => {\n    return fetch(`/api/alocacoes/${id}`, {\n      method: \"PUT\",\n      body: formData,\n      credentials: \"include\",\n    });\n  },\n  deleteAlocacao: (id: number) => apiRequest(\"DELETE\", `/api/alocacoes/${id}`),\n\n  // Transferencias\n  getTransferencias: () => apiRequest(\"GET\", \"/api/transferencias\"),\n  createTransferencia: (data: any) => apiRequest(\"POST\", \"/api/transferencias\", data),\n\n  // Manutencoes\n  getManutencoes: () => apiRequest(\"GET\", \"/api/manutencoes\"),\n  createManutencao: (data: any) => apiRequest(\"POST\", \"/api/manutencoes\", data),\n\n  // Support data\n  getUnidadesSaude: () => apiRequest(\"GET\", \"/api/unidades-saude\"),\n  getSetores: () => apiRequest(\"GET\", \"/api/setores\"),\n};\n","size_bytes":2313},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Alocacao.tsx":{"content":"import { useState } from \"react\";\nimport { useAlocacoes } from \"@/hooks/usePatrimonio\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport AlocacaoModal from \"@/components/modals/AlocacaoModal\";\nimport { Plus, Search, Eye, ArrowRightLeft, Pencil } from \"lucide-react\";\n\nexport default function Alocacao() {\n  const [showModal, setShowModal] = useState(false);\n  const [editingItem, setEditingItem] = useState<any>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [unidadeFilter, setUnidadeFilter] = useState(\"all\");\n\n  const { data: alocacoes = [], isLoading } = useAlocacoes();\n\n  const filteredAlocacoes = alocacoes.filter((item: any) => {\n    const matchesSearch = \n      (item.tombamento?.tombamento && item.tombamento.tombamento.toLowerCase().includes(searchTerm.toLowerCase())) ||\n      (item.tombamento?.produto?.nome && item.tombamento.produto.nome.toLowerCase().includes(searchTerm.toLowerCase())) ||\n      (item.unidadesaude?.nome && item.unidadesaude.nome.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesUnidade = unidadeFilter === \"all\" || \n      (item.unidadesaude?.nome && item.unidadesaude.nome === unidadeFilter);\n    \n    return matchesSearch && matchesUnidade;\n  });\n\n  // Get unique unidades for filter\n  const unidades = Array.from(new Set(alocacoes.map((item: any) => item.unidadesaude?.nome).filter(Boolean))) as string[];\n\n  const handleEdit = (item: any) => {\n    setEditingItem(item);\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setEditingItem(null);\n  };\n\n  // Calculate statistics\n  const stats = alocacoes.reduce((acc: any, item: any) => {\n    const unidadeName = item.unidadesaude?.nome;\n    if (unidadeName) {\n      acc[unidadeName] = (acc[unidadeName] || 0) + 1;\n    }\n    return acc;\n  }, {});\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"space-y-6\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-foreground\">Alocação de Bens</h2>\n            <p className=\"text-muted-foreground\">Carregando alocações...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\" data-testid=\"alocacao-page\">\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-foreground\">Alocação de Bens</h2>\n            <p className=\"text-muted-foreground\">Controle onde cada item tombado está alocado nas unidades</p>\n          </div>\n          <Button\n            onClick={() => setShowModal(true)}\n            className=\"flex items-center space-x-2\"\n            data-testid=\"button-new-alocacao\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            <span>Nova Alocação</span>\n          </Button>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {Object.entries(stats).slice(0, 3).map(([unidade, count], index) => (\n            <Card key={unidade}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">{unidade}</p>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid={`stat-${unidade.toLowerCase().replace(/\\s+/g, '-')}`}>\n                      {count as number}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">itens alocados</p>\n                  </div>\n                  <div className={`p-2 rounded-lg ${\n                    index === 0 ? 'bg-primary/10' : \n                    index === 1 ? 'bg-accent/10' : \n                    'bg-secondary/10'\n                  }`}>\n                    <svg className={`w-6 h-6 ${\n                      index === 0 ? 'text-primary' : \n                      index === 1 ? 'text-accent' : \n                      'text-secondary'\n                    }`} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"/>\n                    </svg>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Alocações Ativas</CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                <Select value={unidadeFilter} onValueChange={setUnidadeFilter}>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue placeholder=\"Filtrar por unidade\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todas as unidades</SelectItem>\n                    {unidades.map((unidade: string) => (\n                      <SelectItem key={unidade} value={unidade}>{unidade}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Buscar por tombamento...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 w-48\"\n                    data-testid=\"search-alocacoes\"\n                  />\n                </div>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Tombamento</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Produto</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Unidade</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Setor</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Responsável</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Data Alocação</th>\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-muted-foreground uppercase tracking-wider\">Ações</th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-card divide-y divide-border\">\n                  {filteredAlocacoes.length === 0 ? (\n                    <tr>\n                      <td colSpan={7} className=\"px-6 py-4 text-center text-muted-foreground\">\n                        {searchTerm || unidadeFilter !== \"all\" ? \"Nenhuma alocação encontrada\" : \"Nenhuma alocação cadastrada\"}\n                      </td>\n                    </tr>\n                  ) : (\n                    filteredAlocacoes.map((item: any) => (\n                      <tr key={item.pkalocacao} data-testid={`alocacao-row-${item.pkalocacao}`}>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm font-medium text-foreground\">\n                            {item.tombamento?.tombamento || \"-\"}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm font-medium text-foreground\">\n                            {item.tombamento?.produto?.nome || \"Produto não encontrado\"}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-foreground\">\n                          {item.unidadesaude?.nome || \"-\"}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-foreground\">\n                          {item.setor?.nome || \"-\"}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-foreground\">\n                          {item.responsavel_unidade || \"-\"}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                          {new Date(item.dataalocacao).toLocaleDateString('pt-BR')}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              title=\"Ver detalhes\"\n                              data-testid={`button-view-${item.pkalocacao}`}\n                            >\n                              <Eye className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"text-accent hover:text-accent\"\n                              title=\"Transferir\"\n                              data-testid={`button-transfer-${item.pkalocacao}`}\n                            >\n                              <ArrowRightLeft className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(item)}\n                              title=\"Editar\"\n                              data-testid={`button-edit-${item.pkalocacao}`}\n                            >\n                              <Pencil className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    ))\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {showModal && (\n        <AlocacaoModal\n          isOpen={showModal}\n          onClose={handleCloseModal}\n          editingItem={editingItem}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":11071},"client/src/pages/Classificacoes.tsx":{"content":"import { useState } from \"react\";\nimport { useClassificacoes, useDeleteClassificacao } from \"@/hooks/usePatrimonio\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport ClassificacaoModal from \"@/components/modals/ClassificacaoModal\";\nimport { Pencil, Trash2, Plus, Search } from \"lucide-react\";\n\nexport default function Classificacoes() {\n  const [showModal, setShowModal] = useState(false);\n  const [editingItem, setEditingItem] = useState<any>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: classificacoes = [], isLoading } = useClassificacoes();\n  const deleteClassificacao = useDeleteClassificacao();\n\n  const filteredClassificacoes = classificacoes.filter((item: any) =>\n    item.classificacao.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleEdit = (item: any) => {\n    setEditingItem(item);\n    setShowModal(true);\n  };\n\n  const handleDelete = async (id: number) => {\n    if (confirm(\"Tem certeza que deseja excluir esta classificação?\")) {\n      deleteClassificacao.mutate(id);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setEditingItem(null);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"space-y-6\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-foreground\">Classificações de Bens</h2>\n            <p className=\"text-muted-foreground\">Carregando classificações...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\" data-testid=\"classificacoes-page\">\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-foreground\">Classificações de Bens</h2>\n            <p className=\"text-muted-foreground\">Gerencie as categorias de classificação do patrimônio</p>\n          </div>\n          <Button\n            onClick={() => setShowModal(true)}\n            className=\"flex items-center space-x-2\"\n            data-testid=\"button-new-classification\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            <span>Nova Classificação</span>\n          </Button>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Lista de Classificações</CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Filtrar classificações...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 w-64\"\n                    data-testid=\"search-classifications\"\n                  />\n                </div>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">ID</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Classificação</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Status</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Criado em</th>\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-muted-foreground uppercase tracking-wider\">Ações</th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-card divide-y divide-border\">\n                  {filteredClassificacoes.length === 0 ? (\n                    <tr>\n                      <td colSpan={5} className=\"px-6 py-4 text-center text-muted-foreground\">\n                        {searchTerm ? \"Nenhuma classificação encontrada\" : \"Nenhuma classificação cadastrada\"}\n                      </td>\n                    </tr>\n                  ) : (\n                    filteredClassificacoes.map((item: any) => (\n                      <tr key={item.pkclassificacao} data-testid={`classification-row-${item.pkclassificacao}`}>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                          {item.pkclassificacao}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm font-medium text-foreground\">{item.classificacao}</div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Badge variant={item.ativo ? \"default\" : \"secondary\"}>\n                            {item.ativo ? \"Ativo\" : \"Inativo\"}\n                          </Badge>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                          {new Date(item.created_at).toLocaleDateString('pt-BR')}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(item)}\n                              data-testid={`button-edit-${item.pkclassificacao}`}\n                            >\n                              <Pencil className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDelete(item.pkclassificacao)}\n                              className=\"text-destructive hover:text-destructive\"\n                              data-testid={`button-delete-${item.pkclassificacao}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    ))\n                  )}\n                </tbody>\n              </table>\n            </div>\n\n            {/* Pagination */}\n            <div className=\"mt-4 flex items-center justify-between border-t border-border pt-4\">\n              <div className=\"text-sm text-muted-foreground\">\n                Mostrando <span className=\"font-medium\">1</span> a{\" \"}\n                <span className=\"font-medium\">{filteredClassificacoes.length}</span> de{\" \"}\n                <span className=\"font-medium\">{filteredClassificacoes.length}</span> resultados\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {showModal && (\n        <ClassificacaoModal\n          isOpen={showModal}\n          onClose={handleCloseModal}\n          editingItem={editingItem}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":7569},"client/src/pages/Dashboard.tsx":{"content":"import { useDashboardStats } from \"@/hooks/usePatrimonio\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Dashboard() {\n  const { data: stats, isLoading } = useDashboardStats();\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"space-y-6\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-foreground\">Visão Geral do Patrimônio</h2>\n            <p className=\"text-muted-foreground\">Carregando dados...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\" data-testid=\"dashboard\">\n      <div className=\"space-y-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Visão Geral do Patrimônio</h2>\n          <p className=\"text-muted-foreground\">Acompanhe o status geral dos bens patrimoniais</p>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total de Itens</p>\n                  <p className=\"text-2xl font-bold text-foreground\" data-testid=\"total-items\">\n                    {stats?.totalItems || 0}\n                  </p>\n                </div>\n                <div className=\"p-2 bg-primary/10 rounded-lg\">\n                  <svg className=\"w-6 h-6 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\"/>\n                  </svg>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Disponíveis</p>\n                  <p className=\"text-2xl font-bold text-accent\" data-testid=\"available-items\">\n                    {stats?.available || 0}\n                  </p>\n                </div>\n                <div className=\"p-2 bg-accent/10 rounded-lg\">\n                  <svg className=\"w-6 h-6 text-accent\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n                  </svg>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Alocados</p>\n                  <p className=\"text-2xl font-bold text-secondary\" data-testid=\"allocated-items\">\n                    {stats?.allocated || 0}\n                  </p>\n                </div>\n                <div className=\"p-2 bg-secondary/10 rounded-lg\">\n                  <svg className=\"w-6 h-6 text-secondary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"/>\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"/>\n                  </svg>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Em Manutenção</p>\n                  <p className=\"text-2xl font-bold text-destructive\" data-testid=\"maintenance-items\">\n                    {stats?.maintenance || 0}\n                  </p>\n                </div>\n                <div className=\"p-2 bg-destructive/10 rounded-lg\">\n                  <svg className=\"w-6 h-6 text-destructive\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n                  </svg>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Additional content can be added here */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Atividades Recentes</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-accent rounded-full mt-2\"></div>\n                  <div>\n                    <p className=\"text-sm text-foreground\">Sistema conectado com sucesso</p>\n                    <p className=\"text-xs text-muted-foreground\">Banco de dados PostgreSQL ativo</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Status do Sistema</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                  <div>\n                    <p className=\"text-sm font-medium text-foreground\">Banco de Dados</p>\n                    <p className=\"text-xs text-muted-foreground\">PostgreSQL Conectado</p>\n                  </div>\n                  <span className=\"px-2 py-1 bg-accent/20 text-accent text-xs rounded-full\">Ativo</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6243},"client/src/pages/Manutencao.tsx":{"content":"import { useState } from \"react\";\nimport { useManutencoes } from \"@/hooks/usePatrimonio\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport ManutencaoModal from \"@/components/modals/ManutencaoModal\";\nimport { Plus, Search, CheckCircle, Pencil, Eye, AlertTriangle, Clock, BarChart3 } from \"lucide-react\";\n\nexport default function Manutencao() {\n  const [showModal, setShowModal] = useState(false);\n  const [editingItem, setEditingItem] = useState<any>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"em-andamento\");\n  const [motivoFilter, setMotivoFilter] = useState(\"all\");\n\n  const { data: manutencoes = [], isLoading } = useManutencoes();\n\n  const filteredManutencoes = manutencoes.filter((item: any) => {\n    const matchesSearch = \n      (item.tombamento?.tombamento && item.tombamento.tombamento.toLowerCase().includes(searchTerm.toLowerCase())) ||\n      (item.tombamento?.produto?.nome && item.tombamento.produto.nome.toLowerCase().includes(searchTerm.toLowerCase())) ||\n      (item.motivo && item.motivo.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const isActive = !item.dataretorno; // Se não tem data de retorno, está em andamento\n    const isDelayed = isActive && new Date(item.dataretirada).getTime() < Date.now() - (15 * 24 * 60 * 60 * 1000); // 15 dias\n    const isCompleted = !!item.dataretorno;\n    \n    let matchesStatus = false;\n    switch (statusFilter) {\n      case \"em-andamento\":\n        matchesStatus = isActive && !isDelayed;\n        break;\n      case \"atrasadas\":\n        matchesStatus = isDelayed;\n        break;\n      case \"concluidas\":\n        matchesStatus = isCompleted;\n        break;\n      case \"historico\":\n        matchesStatus = true;\n        break;\n    }\n    \n    const matchesMotivo = motivoFilter === \"all\" || item.motivo.toLowerCase().includes(motivoFilter.toLowerCase());\n    \n    return matchesSearch && matchesStatus && matchesMotivo;\n  });\n\n  const handleEdit = (item: any) => {\n    setEditingItem(item);\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setEditingItem(null);\n  };\n\n  // Calculate maintenance statistics\n  const stats = {\n    active: manutencoes.filter((m: any) => !m.dataretorno).length,\n    delayed: manutencoes.filter((m: any) => \n      !m.dataretorno && new Date(m.dataretirada).getTime() < Date.now() - (15 * 24 * 60 * 60 * 1000)\n    ).length,\n    completed: manutencoes.filter((m: any) => {\n      const returnDate = m.dataretorno ? new Date(m.dataretorno) : null;\n      const thisMonth = new Date();\n      thisMonth.setDate(1); // First day of current month\n      return returnDate && returnDate >= thisMonth;\n    }).length,\n    averageTime: 12 // This would be calculated from actual data\n  };\n\n  const getStatusBadge = (item: any) => {\n    const isActive = !item.dataretorno;\n    const isDelayed = isActive && new Date(item.dataretirada).getTime() < Date.now() - (15 * 24 * 60 * 60 * 1000);\n    \n    if (item.dataretorno) {\n      return <Badge className=\"bg-accent/20 text-accent\">Concluída</Badge>;\n    } else if (isDelayed) {\n      return <Badge className=\"bg-destructive/20 text-destructive\">Atrasada</Badge>;\n    } else {\n      return <Badge className=\"bg-secondary/20 text-secondary\">Em Andamento</Badge>;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"space-y-6\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-foreground\">Controle de Manutenção</h2>\n            <p className=\"text-muted-foreground\">Carregando manutenções...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\" data-testid=\"manutencao-page\">\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-foreground\">Controle de Manutenção</h2>\n            <p className=\"text-muted-foreground\">Gerencie itens em manutenção externa com datas e motivos</p>\n          </div>\n          <Button\n            onClick={() => setShowModal(true)}\n            className=\"flex items-center space-x-2\"\n            data-testid=\"button-new-manutencao\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            <span>Nova Manutenção</span>\n          </Button>\n        </div>\n\n        {/* Maintenance Status Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Em Manutenção</p>\n                  <p className=\"text-2xl font-bold text-destructive\" data-testid=\"active-maintenance\">\n                    {stats.active}\n                  </p>\n                </div>\n                <div className=\"p-2 bg-destructive/10 rounded-lg\">\n                  <AlertTriangle className=\"w-6 h-6 text-destructive\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Atrasadas</p>\n                  <p className=\"text-2xl font-bold text-destructive\" data-testid=\"delayed-maintenance\">\n                    {stats.delayed}\n                  </p>\n                </div>\n                <div className=\"p-2 bg-destructive/10 rounded-lg\">\n                  <Clock className=\"w-6 h-6 text-destructive\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Concluídas (mês)</p>\n                  <p className=\"text-2xl font-bold text-accent\" data-testid=\"completed-maintenance\">\n                    {stats.completed}\n                  </p>\n                </div>\n                <div className=\"p-2 bg-accent/10 rounded-lg\">\n                  <CheckCircle className=\"w-6 h-6 text-accent\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Tempo Médio</p>\n                  <p className=\"text-2xl font-bold text-secondary\" data-testid=\"average-time\">\n                    {stats.averageTime}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">dias</p>\n                </div>\n                <div className=\"p-2 bg-secondary/10 rounded-lg\">\n                  <BarChart3 className=\"w-6 h-6 text-secondary\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Status Tabs */}\n        <div className=\"border-b border-border\">\n          <nav className=\"flex space-x-8\">\n            <button\n              onClick={() => setStatusFilter(\"em-andamento\")}\n              className={`border-b-2 py-2 px-1 text-sm font-medium ${\n                statusFilter === \"em-andamento\"\n                  ? \"border-primary text-primary\"\n                  : \"border-transparent text-muted-foreground hover:text-foreground\"\n              }`}\n              data-testid=\"filter-em-andamento\"\n            >\n              Em Andamento ({stats.active - stats.delayed})\n            </button>\n            <button\n              onClick={() => setStatusFilter(\"atrasadas\")}\n              className={`border-b-2 py-2 px-1 text-sm font-medium ${\n                statusFilter === \"atrasadas\"\n                  ? \"border-primary text-primary\"\n                  : \"border-transparent text-muted-foreground hover:text-foreground\"\n              }`}\n              data-testid=\"filter-atrasadas\"\n            >\n              Atrasadas ({stats.delayed})\n            </button>\n            <button\n              onClick={() => setStatusFilter(\"concluidas\")}\n              className={`border-b-2 py-2 px-1 text-sm font-medium ${\n                statusFilter === \"concluidas\"\n                  ? \"border-primary text-primary\"\n                  : \"border-transparent text-muted-foreground hover:text-foreground\"\n              }`}\n              data-testid=\"filter-concluidas\"\n            >\n              Concluídas ({stats.completed})\n            </button>\n            <button\n              onClick={() => setStatusFilter(\"historico\")}\n              className={`border-b-2 py-2 px-1 text-sm font-medium ${\n                statusFilter === \"historico\"\n                  ? \"border-primary text-primary\"\n                  : \"border-transparent text-muted-foreground hover:text-foreground\"\n              }`}\n              data-testid=\"filter-historico\"\n            >\n              Histórico\n            </button>\n          </nav>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>\n                {statusFilter === \"em-andamento\" && \"Manutenções em Andamento\"}\n                {statusFilter === \"atrasadas\" && \"Manutenções Atrasadas\"}\n                {statusFilter === \"concluidas\" && \"Manutenções Concluídas\"}\n                {statusFilter === \"historico\" && \"Histórico de Manutenções\"}\n              </CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                <Select value={motivoFilter} onValueChange={setMotivoFilter}>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue placeholder=\"Filtrar por motivo\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todos os motivos</SelectItem>\n                    <SelectItem value=\"defeito\">Defeito técnico</SelectItem>\n                    <SelectItem value=\"preventiva\">Manutenção preventiva</SelectItem>\n                    <SelectItem value=\"calibração\">Calibração</SelectItem>\n                  </SelectContent>\n                </Select>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Buscar manutenção...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 w-48\"\n                    data-testid=\"search-manutencoes\"\n                  />\n                </div>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Tombamento</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Produto</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Data Retirada</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Motivo</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Previsão Retorno</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Status</th>\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-muted-foreground uppercase tracking-wider\">Ações</th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-card divide-y divide-border\">\n                  {filteredManutencoes.length === 0 ? (\n                    <tr>\n                      <td colSpan={7} className=\"px-6 py-4 text-center text-muted-foreground\">\n                        {searchTerm || motivoFilter !== \"all\" ? \"Nenhuma manutenção encontrada\" : \"Nenhuma manutenção cadastrada\"}\n                      </td>\n                    </tr>\n                  ) : (\n                    filteredManutencoes.map((item: any) => (\n                      <tr key={item.pkmanutencao} data-testid={`manutencao-row-${item.pkmanutencao}`}>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm font-medium text-foreground\">\n                            {item.tombamento?.tombamento || \"-\"}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm font-medium text-foreground\">\n                            {item.tombamento?.produto?.nome || \"Produto não encontrado\"}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-foreground\">\n                          {new Date(item.dataretirada).toLocaleDateString('pt-BR')}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm text-foreground\">{item.motivo}</div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-foreground\">\n                          {item.dataretorno \n                            ? new Date(item.dataretorno).toLocaleDateString('pt-BR')\n                            : \"Em aberto\"}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          {getStatusBadge(item)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                          <div className=\"flex justify-end space-x-2\">\n                            {!item.dataretorno && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"text-accent hover:text-accent\"\n                                title=\"Finalizar manutenção\"\n                                data-testid={`button-return-${item.pkmanutencao}`}\n                              >\n                                <CheckCircle className=\"w-4 h-4\" />\n                              </Button>\n                            )}\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(item)}\n                              title=\"Editar\"\n                              data-testid={`button-edit-${item.pkmanutencao}`}\n                            >\n                              <Pencil className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              title=\"Ver detalhes\"\n                              data-testid={`button-view-${item.pkmanutencao}`}\n                            >\n                              <Eye className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    ))\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {showModal && (\n        <ManutencaoModal\n          isOpen={showModal}\n          onClose={handleCloseModal}\n          editingItem={editingItem}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":16447},"client/src/pages/Tombamento.tsx":{"content":"import { useState } from \"react\";\nimport { useTombamentos } from \"@/hooks/usePatrimonio\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport TombamentoModal from \"@/components/modals/TombamentoModal\";\nimport { Plus, Search, Eye, Pencil, Trash2, Image } from \"lucide-react\";\n\nexport default function Tombamento() {\n  const [showModal, setShowModal] = useState(false);\n  const [editingItem, setEditingItem] = useState<any>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n\n  const { data: tombamentos = [], isLoading } = useTombamentos();\n\n  const filteredTombamentos = tombamentos.filter((item: any) => {\n    const matchesSearch = \n      item.tombamento.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (item.serial && item.serial.toLowerCase().includes(searchTerm.toLowerCase())) ||\n      (item.produto?.nome && item.produto.nome.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesStatus = statusFilter === \"all\" || item.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const handleEdit = (item: any) => {\n    setEditingItem(item);\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setEditingItem(null);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"disponivel\":\n        return <Badge className=\"bg-accent/20 text-accent\">Disponível</Badge>;\n      case \"alocado\":\n        return <Badge className=\"bg-secondary/20 text-secondary\">Alocado</Badge>;\n      case \"manutencao\":\n        return <Badge className=\"bg-destructive/20 text-destructive\">Manutenção</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"space-y-6\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-foreground\">Tombamento de Bens</h2>\n            <p className=\"text-muted-foreground\">Carregando tombamentos...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\" data-testid=\"tombamento-page\">\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-foreground\">Tombamento de Bens</h2>\n            <p className=\"text-muted-foreground\">Registre novos itens com número de tombamento e fotos</p>\n          </div>\n          <Button\n            onClick={() => setShowModal(true)}\n            className=\"flex items-center space-x-2\"\n            data-testid=\"button-new-tombamento\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            <span>Novo Tombamento</span>\n          </Button>\n        </div>\n\n        {/* Status Filter Tabs */}\n        <div className=\"border-b border-border\">\n          <nav className=\"flex space-x-8\">\n            <button\n              onClick={() => setStatusFilter(\"all\")}\n              className={`border-b-2 py-2 px-1 text-sm font-medium ${\n                statusFilter === \"all\"\n                  ? \"border-primary text-primary\"\n                  : \"border-transparent text-muted-foreground hover:text-foreground\"\n              }`}\n              data-testid=\"filter-all\"\n            >\n              Todos ({tombamentos.length})\n            </button>\n            <button\n              onClick={() => setStatusFilter(\"disponivel\")}\n              className={`border-b-2 py-2 px-1 text-sm font-medium ${\n                statusFilter === \"disponivel\"\n                  ? \"border-primary text-primary\"\n                  : \"border-transparent text-muted-foreground hover:text-foreground\"\n              }`}\n              data-testid=\"filter-disponivel\"\n            >\n              Disponíveis ({tombamentos.filter((t: any) => t.status === \"disponivel\").length})\n            </button>\n            <button\n              onClick={() => setStatusFilter(\"alocado\")}\n              className={`border-b-2 py-2 px-1 text-sm font-medium ${\n                statusFilter === \"alocado\"\n                  ? \"border-primary text-primary\"\n                  : \"border-transparent text-muted-foreground hover:text-foreground\"\n              }`}\n              data-testid=\"filter-alocado\"\n            >\n              Alocados ({tombamentos.filter((t: any) => t.status === \"alocado\").length})\n            </button>\n            <button\n              onClick={() => setStatusFilter(\"manutencao\")}\n              className={`border-b-2 py-2 px-1 text-sm font-medium ${\n                statusFilter === \"manutencao\"\n                  ? \"border-primary text-primary\"\n                  : \"border-transparent text-muted-foreground hover:text-foreground\"\n              }`}\n              data-testid=\"filter-manutencao\"\n            >\n              Manutenção ({tombamentos.filter((t: any) => t.status === \"manutencao\").length})\n            </button>\n          </nav>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Lista de Tombamentos</CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Buscar por tombamento ou serial...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 w-64\"\n                    data-testid=\"search-tombamentos\"\n                  />\n                </div>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue placeholder=\"Filtrar por status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todos os status</SelectItem>\n                    <SelectItem value=\"disponivel\">Disponível</SelectItem>\n                    <SelectItem value=\"alocado\">Alocado</SelectItem>\n                    <SelectItem value=\"manutencao\">Manutenção</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Tombamento</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Produto</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Nº Serial</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Status</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Responsável</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Fotos</th>\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-muted-foreground uppercase tracking-wider\">Ações</th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-card divide-y divide-border\">\n                  {filteredTombamentos.length === 0 ? (\n                    <tr>\n                      <td colSpan={7} className=\"px-6 py-4 text-center text-muted-foreground\">\n                        {searchTerm || statusFilter !== \"all\" ? \"Nenhum tombamento encontrado\" : \"Nenhum tombamento cadastrado\"}\n                      </td>\n                    </tr>\n                  ) : (\n                    filteredTombamentos.map((item: any) => (\n                      <tr key={item.pktombamento} data-testid={`tombamento-row-${item.pktombamento}`}>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm font-medium text-foreground\">{item.tombamento}</div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm font-medium text-foreground\">\n                            {item.produto?.nome || \"Produto não encontrado\"}\n                          </div>\n                          {item.produto?.descricao && (\n                            <div className=\"text-sm text-muted-foreground\">{item.produto.descricao}</div>\n                          )}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-foreground\">\n                          {item.serial || \"-\"}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          {getStatusBadge(item.status)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-foreground\">\n                          {item.responsavel || \"-\"}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center space-x-1\">\n                            <span className=\"text-sm text-muted-foreground\">\n                              {item.photos ? JSON.parse(item.photos).length : 0} fotos\n                            </span>\n                            {item.photos && (\n                              <Button variant=\"ghost\" size=\"sm\" title=\"Ver fotos\">\n                                <Image className=\"w-4 h-4\" />\n                              </Button>\n                            )}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button variant=\"ghost\" size=\"sm\" title=\"Ver detalhes\" data-testid={`button-view-${item.pktombamento}`}>\n                              <Eye className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(item)}\n                              title=\"Editar\"\n                              data-testid={`button-edit-${item.pktombamento}`}\n                            >\n                              <Pencil className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"text-destructive hover:text-destructive\"\n                              title=\"Excluir\"\n                              data-testid={`button-delete-${item.pktombamento}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    ))\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {showModal && (\n        <TombamentoModal\n          isOpen={showModal}\n          onClose={handleCloseModal}\n          editingItem={editingItem}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":12056},"client/src/pages/Transferencia.tsx":{"content":"import { useState } from \"react\";\nimport { useTransferencias } from \"@/hooks/usePatrimonio\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport TransferenciaModal from \"@/components/modals/TransferenciaModal\";\nimport { Plus, Search, Eye, Printer, ArrowRightLeft } from \"lucide-react\";\n\nexport default function Transferencia() {\n  const [showModal, setShowModal] = useState(false);\n  const [editingItem, setEditingItem] = useState<any>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [periodFilter, setPeriodFilter] = useState(\"30\");\n\n  const { data: transferencias = [], isLoading } = useTransferencias();\n\n  const filteredTransferencias = transferencias.filter((item: any) => {\n    const matchesSearch = \n      (item.tombamento?.tombamento && item.tombamento.tombamento.toLowerCase().includes(searchTerm.toLowerCase())) ||\n      (item.tombamento?.produto?.nome && item.tombamento.produto.nome.toLowerCase().includes(searchTerm.toLowerCase())) ||\n      (item.unidade_origem?.nome && item.unidade_origem.nome.toLowerCase().includes(searchTerm.toLowerCase())) ||\n      (item.unidade_destino?.nome && item.unidade_destino.nome.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    // Filter by period (last X days)\n    const days = parseInt(periodFilter);\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - days);\n    const transferDate = new Date(item.datatasnferencia);\n    const matchesPeriod = transferDate >= cutoffDate;\n    \n    return matchesSearch && matchesPeriod;\n  });\n\n  const handleEdit = (item: any) => {\n    setEditingItem(item);\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setEditingItem(null);\n  };\n\n  // Calculate transfer flow statistics\n  const transferStats = {\n    totalTransfers: transferencias.length,\n    lastMonth: transferencias.filter((t: any) => {\n      const date = new Date(t.datatasnferencia);\n      const lastMonth = new Date();\n      lastMonth.setMonth(lastMonth.getMonth() - 1);\n      return date >= lastMonth;\n    }).length\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"space-y-6\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-foreground\">Transferências de Bens</h2>\n            <p className=\"text-muted-foreground\">Carregando transferências...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\" data-testid=\"transferencia-page\">\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-foreground\">Transferências de Bens</h2>\n            <p className=\"text-muted-foreground\">Movimentação de itens entre unidades e setores</p>\n          </div>\n          <Button\n            onClick={() => setShowModal(true)}\n            className=\"flex items-center space-x-2\"\n            data-testid=\"button-new-transferencia\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            <span>Nova Transferência</span>\n          </Button>\n        </div>\n\n        {/* Transfer Flow Visualization */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-medium text-foreground mb-4\">Fluxo de Transferências (Últimos 30 dias)</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-2\">\n                  <svg className=\"w-8 h-8 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"/>\n                  </svg>\n                </div>\n                <p className=\"text-sm font-medium text-foreground\">Total Transferências</p>\n                <p className=\"text-2xl font-bold text-primary\" data-testid=\"total-transfers\">\n                  {transferStats.totalTransfers}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">histórico completo</p>\n              </div>\n              \n              <div className=\"flex items-center justify-center\">\n                <ArrowRightLeft className=\"w-8 h-8 text-muted-foreground\" />\n              </div>\n\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-2\">\n                  <svg className=\"w-8 h-8 text-accent\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"/>\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"/>\n                  </svg>\n                </div>\n                <p className=\"text-sm font-medium text-foreground\">Último Mês</p>\n                <p className=\"text-2xl font-bold text-accent\" data-testid=\"monthly-transfers\">\n                  {transferStats.lastMonth}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">transferências</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Histórico de Transferências</CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                <Select value={periodFilter} onValueChange={setPeriodFilter}>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue placeholder=\"Filtrar período\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"30\">Últimos 30 dias</SelectItem>\n                    <SelectItem value=\"90\">Últimos 3 meses</SelectItem>\n                    <SelectItem value=\"365\">Este ano</SelectItem>\n                  </SelectContent>\n                </Select>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Buscar transferência...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 w-48\"\n                    data-testid=\"search-transferencias\"\n                  />\n                </div>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Data</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Tombamento</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Produto</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Origem</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Destino</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Responsável</th>\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-muted-foreground uppercase tracking-wider\">Ações</th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-card divide-y divide-border\">\n                  {filteredTransferencias.length === 0 ? (\n                    <tr>\n                      <td colSpan={7} className=\"px-6 py-4 text-center text-muted-foreground\">\n                        {searchTerm || periodFilter !== \"30\" ? \"Nenhuma transferência encontrada\" : \"Nenhuma transferência cadastrada\"}\n                      </td>\n                    </tr>\n                  ) : (\n                    filteredTransferencias.map((item: any) => (\n                      <tr key={item.pktransferencia} data-testid={`transferencia-row-${item.pktransferencia}`}>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-foreground\">\n                          {new Date(item.datatasnferencia).toLocaleDateString('pt-BR')}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm font-medium text-foreground\">\n                            {item.tombamento?.tombamento || \"-\"}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm font-medium text-foreground\">\n                            {item.tombamento?.produto?.nome || \"Produto não encontrado\"}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm text-foreground\">\n                            {item.unidade_origem?.nome || \"Não informado\"}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm text-foreground\">\n                            {item.unidade_destino?.nome || \"Não informado\"}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-foreground\">\n                          {item.responsavel || \"-\"}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              title=\"Ver detalhes\"\n                              data-testid={`button-view-${item.pktransferencia}`}\n                            >\n                              <Eye className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              title=\"Imprimir termo\"\n                              data-testid={`button-print-${item.pktransferencia}`}\n                            >\n                              <Printer className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    ))\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {showModal && (\n        <TransferenciaModal\n          isOpen={showModal}\n          onClose={handleCloseModal}\n          editingItem={editingItem}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":11805},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/modals/AlocacaoModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useCreateAlocacao, useUpdateAlocacao, useTombamentos, useUnidadesSaude, useSetores } from \"@/hooks/usePatrimonio\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Upload, X } from \"lucide-react\";\n\ninterface AlocacaoModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingItem?: any;\n}\n\nexport default function AlocacaoModal({ isOpen, onClose, editingItem }: AlocacaoModalProps) {\n  const [formData, setFormData] = useState({\n    fktombamento: \"\",\n    fkunidadesaude: \"\",\n    fksetor: \"\",\n    responsavel_unidade: \"\",\n    dataalocacao: \"\",\n    termo: \"\",\n    responsavel: \"\",\n  });\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [previewUrls, setPreviewUrls] = useState<string[]>([]);\n\n  const { data: tombamentos = [] } = useTombamentos();\n  const { data: unidades = [] } = useUnidadesSaude();\n  const { data: setores = [] } = useSetores();\n  const createAlocacao = useCreateAlocacao();\n  const updateAlocacao = useUpdateAlocacao();\n\n  // Filter available tombamentos (only disponivel status) + current tombamento if editing\n  const availableTombamentos = editingItem \n    ? tombamentos.filter((t: any) => t.status === \"disponivel\" || t.pktombamento === editingItem.fktombamento)\n    : tombamentos.filter((t: any) => t.status === \"disponivel\");\n\n  useEffect(() => {\n    if (editingItem) {\n      setFormData({\n        fktombamento: editingItem.fktombamento?.toString() || \"\",\n        fkunidadesaude: editingItem.fkunidadesaude?.toString() || \"\",\n        fksetor: editingItem.fksetor?.toString() || \"\",\n        responsavel_unidade: editingItem.responsavel_unidade || \"\",\n        dataalocacao: editingItem.dataalocacao ? new Date(editingItem.dataalocacao).toISOString().split('T')[0] : \"\",\n        termo: editingItem.termo || \"\",\n        responsavel: editingItem.responsavel || \"\",\n      });\n    } else {\n      const today = new Date().toISOString().split('T')[0];\n      setFormData({\n        fktombamento: \"\",\n        fkunidadesaude: \"\",\n        fksetor: \"\",\n        responsavel_unidade: \"\",\n        dataalocacao: today,\n        termo: \"\",\n        responsavel: \"\",\n      });\n    }\n  }, [editingItem]);\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    const validFiles = files.filter(file => {\n      const isValidType = file.type.startsWith('image/');\n      const isValidSize = file.size <= 10 * 1024 * 1024; // 10MB\n      return isValidType && isValidSize;\n    });\n\n    setSelectedFiles(prev => [...prev, ...validFiles]);\n    \n    validFiles.forEach(file => {\n      const url = URL.createObjectURL(file);\n      setPreviewUrls(prev => [...prev, url]);\n    });\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n    setPreviewUrls(prev => {\n      const newUrls = prev.filter((_, i) => i !== index);\n      URL.revokeObjectURL(prev[index]);\n      return newUrls;\n    });\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.fktombamento || !formData.fkunidadesaude || !formData.responsavel_unidade || !formData.dataalocacao) {\n      return;\n    }\n\n    try {\n      const submitFormData = new FormData();\n      \n      Object.entries(formData).forEach(([key, value]) => {\n        if (value) {\n          submitFormData.append(key, value);\n        }\n      });\n\n      selectedFiles.forEach(file => {\n        submitFormData.append('photos', file);\n      });\n\n      if (editingItem) {\n        await updateAlocacao.mutateAsync({ id: editingItem.pkalocacao, formData: submitFormData });\n      } else {\n        await createAlocacao.mutateAsync(submitFormData);\n      }\n      onClose();\n      \n      // Clean up preview URLs\n      previewUrls.forEach(url => URL.revokeObjectURL(url));\n      setPreviewUrls([]);\n      setSelectedFiles([]);\n    } catch (error) {\n      console.error(\"Error saving alocacao:\", error);\n    }\n  };\n\n  const isLoading = createAlocacao.isPending || updateAlocacao.isPending;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"alocacao-modal\">\n        <DialogHeader>\n          <DialogTitle>\n            {editingItem ? \"Editar Alocação\" : \"Nova Alocação\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"fktombamento\" className=\"text-sm font-medium text-foreground\">\n                Tombamento *\n              </Label>\n              <Select\n                value={formData.fktombamento}\n                onValueChange={(value) => setFormData({ ...formData, fktombamento: value })}\n                required\n              >\n                <SelectTrigger data-testid=\"select-tombamento\">\n                  <SelectValue placeholder=\"Selecione um tombamento\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {availableTombamentos.map((tombamento: any) => (\n                    <SelectItem key={tombamento.pktombamento} value={tombamento.pktombamento.toString()}>\n                      {tombamento.tombamento} - {tombamento.produto?.nome || \"Produto\"}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"fkunidadesaude\" className=\"text-sm font-medium text-foreground\">\n                Unidade de Saúde *\n              </Label>\n              <Select\n                value={formData.fkunidadesaude}\n                onValueChange={(value) => setFormData({ ...formData, fkunidadesaude: value })}\n                required\n              >\n                <SelectTrigger data-testid=\"select-unidade\">\n                  <SelectValue placeholder=\"Selecione uma unidade\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {unidades.map((unidade: any) => (\n                    <SelectItem key={unidade.pkunidadesaude} value={unidade.pkunidadesaude.toString()}>\n                      {unidade.nome}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"fksetor\" className=\"text-sm font-medium text-foreground\">\n                Setor\n              </Label>\n              <Select\n                value={formData.fksetor}\n                onValueChange={(value) => setFormData({ ...formData, fksetor: value })}\n              >\n                <SelectTrigger data-testid=\"select-setor\">\n                  <SelectValue placeholder=\"Selecione um setor (opcional)\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {setores.map((setor: any) => (\n                    <SelectItem key={setor.pksetor} value={setor.pksetor.toString()}>\n                      {setor.nome}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"dataalocacao\" className=\"text-sm font-medium text-foreground\">\n                Data de Alocação *\n              </Label>\n              <Input\n                id=\"dataalocacao\"\n                type=\"date\"\n                value={formData.dataalocacao}\n                onChange={(e) => setFormData({ ...formData, dataalocacao: e.target.value })}\n                required\n                data-testid=\"input-data-alocacao\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"responsavel_unidade\" className=\"text-sm font-medium text-foreground\">\n                Responsável na Unidade *\n              </Label>\n              <Input\n                id=\"responsavel_unidade\"\n                type=\"text\"\n                value={formData.responsavel_unidade}\n                onChange={(e) => setFormData({ ...formData, responsavel_unidade: e.target.value })}\n                placeholder=\"Nome do responsável\"\n                required\n                data-testid=\"input-responsavel-unidade\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"responsavel\" className=\"text-sm font-medium text-foreground\">\n                Responsável pela Alocação\n              </Label>\n              <Input\n                id=\"responsavel\"\n                type=\"text\"\n                value={formData.responsavel}\n                onChange={(e) => setFormData({ ...formData, responsavel: e.target.value })}\n                placeholder=\"Nome do responsável\"\n                data-testid=\"input-responsavel\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"termo\" className=\"text-sm font-medium text-foreground\">\n              Termo de Responsabilidade\n            </Label>\n            <Textarea\n              id=\"termo\"\n              value={formData.termo}\n              onChange={(e) => setFormData({ ...formData, termo: e.target.value })}\n              placeholder=\"Detalhes do termo de responsabilidade...\"\n              rows={3}\n              data-testid=\"textarea-termo\"\n            />\n          </div>\n\n          <div>\n            <Label className=\"text-sm font-medium text-foreground mb-2 block\">\n              Fotos da Alocação\n            </Label>\n            <div className=\"border-2 border-dashed border-border rounded-lg p-6 text-center\">\n              <input\n                type=\"file\"\n                multiple\n                accept=\"image/*\"\n                onChange={handleFileChange}\n                className=\"hidden\"\n                id=\"photo-upload\"\n                data-testid=\"file-input\"\n              />\n              <label htmlFor=\"photo-upload\" className=\"cursor-pointer\">\n                <Upload className=\"mx-auto h-12 w-12 text-muted-foreground mb-2\" />\n                <p className=\"text-sm text-muted-foreground\">\n                  <span className=\"font-medium text-primary hover:text-primary/80\">Clique para fazer upload</span> ou arraste as fotos aqui\n                </p>\n                <p className=\"text-xs text-muted-foreground\">PNG, JPG, WEBP até 10MB cada</p>\n              </label>\n            </div>\n\n            {/* Photo Previews */}\n            {previewUrls.length > 0 && (\n              <div className=\"mt-4 grid grid-cols-2 md:grid-cols-4 gap-4\">\n                {previewUrls.map((url, index) => (\n                  <div key={index} className=\"relative group\">\n                    <img\n                      src={url}\n                      alt={`Preview ${index + 1}`}\n                      className=\"w-full h-20 object-cover rounded-lg\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      className=\"absolute -top-2 -right-2 h-6 w-6 rounded-full p-0 opacity-0 group-hover:opacity-100\"\n                      onClick={() => removeFile(index)}\n                      data-testid={`remove-photo-${index}`}\n                    >\n                      <X className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              disabled={isLoading}\n              data-testid=\"button-cancel\"\n            >\n              Cancelar\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isLoading || !formData.fktombamento || !formData.fkunidadesaude || !formData.responsavel_unidade || !formData.dataalocacao}\n              data-testid=\"button-save\"\n            >\n              {isLoading ? \"Salvando...\" : \"Criar Alocação\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":12696},"client/src/components/modals/ClassificacaoModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useCreateClassificacao, useUpdateClassificacao } from \"@/hooks/usePatrimonio\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\ninterface ClassificacaoModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingItem?: any;\n}\n\nexport default function ClassificacaoModal({ isOpen, onClose, editingItem }: ClassificacaoModalProps) {\n  const [formData, setFormData] = useState({\n    classificacao: \"\",\n    ativo: true,\n  });\n\n  const createClassificacao = useCreateClassificacao();\n  const updateClassificacao = useUpdateClassificacao();\n\n  useEffect(() => {\n    if (editingItem) {\n      setFormData({\n        classificacao: editingItem.classificacao || \"\",\n        ativo: editingItem.ativo ?? true,\n      });\n    } else {\n      setFormData({\n        classificacao: \"\",\n        ativo: true,\n      });\n    }\n  }, [editingItem]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.classificacao.trim()) {\n      return;\n    }\n\n    try {\n      if (editingItem) {\n        await updateClassificacao.mutateAsync({\n          id: editingItem.pkclassificacao,\n          data: formData,\n        });\n      } else {\n        await createClassificacao.mutateAsync(formData);\n      }\n      onClose();\n    } catch (error) {\n      console.error(\"Error saving classificacao:\", error);\n    }\n  };\n\n  const isLoading = createClassificacao.isPending || updateClassificacao.isPending;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"classificacao-modal\">\n        <DialogHeader>\n          <DialogTitle>\n            {editingItem ? \"Editar Classificação\" : \"Nova Classificação\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"classificacao\" className=\"text-sm font-medium text-foreground\">\n              Nome da Classificação\n            </Label>\n            <Input\n              id=\"classificacao\"\n              type=\"text\"\n              value={formData.classificacao}\n              onChange={(e) => setFormData({ ...formData, classificacao: e.target.value })}\n              placeholder=\"Ex: Equipamentos Médicos\"\n              required\n              data-testid=\"input-classificacao\"\n            />\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"ativo\"\n              checked={formData.ativo}\n              onCheckedChange={(checked) => setFormData({ ...formData, ativo: !!checked })}\n              data-testid=\"checkbox-ativo\"\n            />\n            <Label htmlFor=\"ativo\" className=\"text-sm text-foreground\">\n              Classificação ativa\n            </Label>\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              disabled={isLoading}\n              data-testid=\"button-cancel\"\n            >\n              Cancelar\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isLoading || !formData.classificacao.trim()}\n              data-testid=\"button-save\"\n            >\n              {isLoading ? \"Salvando...\" : \"Salvar\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3713},"client/src/components/modals/ManutencaoModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useCreateManutencao, useTombamentos } from \"@/hooks/usePatrimonio\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\ninterface ManutencaoModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingItem?: any;\n}\n\nexport default function ManutencaoModal({ isOpen, onClose, editingItem }: ManutencaoModalProps) {\n  const [formData, setFormData] = useState({\n    fktombamento: \"\",\n    dataretirada: \"\",\n    motivo: \"\",\n    responsavel: \"\",\n    dataretorno: \"\",\n  });\n\n  const { data: tombamentos = [] } = useTombamentos();\n  const createManutencao = useCreateManutencao();\n\n  // Filter tombamentos - only alocado or disponivel items can go to maintenance\n  const availableTombamentos = tombamentos.filter((t: any) => \n    t.status === \"disponivel\" || t.status === \"alocado\"\n  );\n\n  useEffect(() => {\n    if (editingItem) {\n      setFormData({\n        fktombamento: editingItem.fktombamento?.toString() || \"\",\n        dataretirada: editingItem.dataretirada ? new Date(editingItem.dataretirada).toISOString().split('T')[0] : \"\",\n        motivo: editingItem.motivo || \"\",\n        responsavel: editingItem.responsavel || \"\",\n        dataretorno: editingItem.dataretorno ? new Date(editingItem.dataretorno).toISOString().split('T')[0] : \"\",\n      });\n    } else {\n      const today = new Date().toISOString().split('T')[0];\n      setFormData({\n        fktombamento: \"\",\n        dataretirada: today,\n        motivo: \"\",\n        responsavel: \"\",\n        dataretorno: \"\",\n      });\n    }\n  }, [editingItem]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.fktombamento || !formData.dataretirada || !formData.motivo) {\n      return;\n    }\n\n    try {\n      const submitData = {\n        fktombamento: parseInt(formData.fktombamento),\n        dataretirada: new Date(formData.dataretirada),\n        motivo: formData.motivo,\n        responsavel: formData.responsavel || undefined,\n        dataretorno: formData.dataretorno ? new Date(formData.dataretorno) : undefined,\n      };\n\n      await createManutencao.mutateAsync(submitData);\n      onClose();\n    } catch (error) {\n      console.error(\"Error saving manutencao:\", error);\n    }\n  };\n\n  const isLoading = createManutencao.isPending;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"manutencao-modal\">\n        <DialogHeader>\n          <DialogTitle>\n            {editingItem ? \"Editar Manutenção\" : \"Nova Manutenção\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"fktombamento\" className=\"text-sm font-medium text-foreground\">\n              Item Tombado *\n            </Label>\n            <Select\n              value={formData.fktombamento}\n              onValueChange={(value) => setFormData({ ...formData, fktombamento: value })}\n              required\n            >\n              <SelectTrigger data-testid=\"select-tombamento\">\n                <SelectValue placeholder=\"Selecione um item para manutenção\" />\n              </SelectTrigger>\n              <SelectContent>\n                {availableTombamentos.map((tombamento: any) => (\n                  <SelectItem key={tombamento.pktombamento} value={tombamento.pktombamento.toString()}>\n                    {tombamento.tombamento} - {tombamento.produto?.nome || \"Produto\"} \n                    ({tombamento.status})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"dataretirada\" className=\"text-sm font-medium text-foreground\">\n                Data de Retirada *\n              </Label>\n              <Input\n                id=\"dataretirada\"\n                type=\"date\"\n                value={formData.dataretirada}\n                onChange={(e) => setFormData({ ...formData, dataretirada: e.target.value })}\n                required\n                data-testid=\"input-data-retirada\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"dataretorno\" className=\"text-sm font-medium text-foreground\">\n                Previsão de Retorno\n              </Label>\n              <Input\n                id=\"dataretorno\"\n                type=\"date\"\n                value={formData.dataretorno}\n                onChange={(e) => setFormData({ ...formData, dataretorno: e.target.value })}\n                min={formData.dataretirada} // Cannot be before withdrawal date\n                data-testid=\"input-data-retorno\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"motivo\" className=\"text-sm font-medium text-foreground\">\n              Motivo da Manutenção *\n            </Label>\n            <Textarea\n              id=\"motivo\"\n              value={formData.motivo}\n              onChange={(e) => setFormData({ ...formData, motivo: e.target.value })}\n              placeholder=\"Descreva o motivo da manutenção (defeito, manutenção preventiva, calibração, etc.)\"\n              rows={3}\n              required\n              data-testid=\"textarea-motivo\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"responsavel\" className=\"text-sm font-medium text-foreground\">\n              Responsável pela Manutenção\n            </Label>\n            <Input\n              id=\"responsavel\"\n              type=\"text\"\n              value={formData.responsavel}\n              onChange={(e) => setFormData({ ...formData, responsavel: e.target.value })}\n              placeholder=\"Nome do responsável ou empresa\"\n              data-testid=\"input-responsavel\"\n            />\n          </div>\n\n          {/* Information about maintenance status */}\n          <div className=\"bg-muted p-4 rounded-lg\">\n            <h4 className=\"text-sm font-medium text-foreground mb-2\">Informações</h4>\n            <ul className=\"text-sm text-muted-foreground space-y-1\">\n              <li>• O item será marcado como \"Em Manutenção\" e ficará indisponível para alocação</li>\n              <li>• Se o item estiver alocado, permanecerá na mesma unidade mas com status de manutenção</li>\n              <li>• Após o retorno da manutenção, o status voltará para \"Disponível\"</li>\n            </ul>\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              disabled={isLoading}\n              data-testid=\"button-cancel\"\n            >\n              Cancelar\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isLoading || !formData.fktombamento || !formData.dataretirada || !formData.motivo}\n              data-testid=\"button-save\"\n            >\n              {isLoading ? \"Salvando...\" : \"Iniciar Manutenção\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7548},"client/src/components/modals/TombamentoModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useCreateTombamento, useUpdateTombamento, useProdutos } from \"@/hooks/usePatrimonio\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Upload, X, Image } from \"lucide-react\";\n\ninterface TombamentoModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingItem?: any;\n}\n\nexport default function TombamentoModal({ isOpen, onClose, editingItem }: TombamentoModalProps) {\n  const [formData, setFormData] = useState({\n    fkproduto: \"\",\n    tombamento: \"\",\n    serial: \"\",\n    responsavel: \"\",\n    status: \"disponivel\",\n  });\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [previewUrls, setPreviewUrls] = useState<string[]>([]);\n\n  const { data: produtos = [] } = useProdutos();\n  const createTombamento = useCreateTombamento();\n  const updateTombamento = useUpdateTombamento();\n\n  useEffect(() => {\n    if (editingItem) {\n      setFormData({\n        fkproduto: editingItem.fkproduto?.toString() || \"\",\n        tombamento: editingItem.tombamento || \"\",\n        serial: editingItem.serial || \"\",\n        responsavel: editingItem.responsavel || \"\",\n        status: editingItem.status || \"disponivel\",\n      });\n      // Handle existing photos if needed\n    } else {\n      setFormData({\n        fkproduto: \"\",\n        tombamento: \"\",\n        serial: \"\",\n        responsavel: \"\",\n        status: \"disponivel\",\n      });\n    }\n  }, [editingItem]);\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    const validFiles = files.filter(file => {\n      const isValidType = file.type.startsWith('image/');\n      const isValidSize = file.size <= 10 * 1024 * 1024; // 10MB\n      return isValidType && isValidSize;\n    });\n\n    setSelectedFiles(prev => [...prev, ...validFiles]);\n    \n    // Create preview URLs\n    validFiles.forEach(file => {\n      const url = URL.createObjectURL(file);\n      setPreviewUrls(prev => [...prev, url]);\n    });\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n    setPreviewUrls(prev => {\n      const newUrls = prev.filter((_, i) => i !== index);\n      // Revoke the removed URL to prevent memory leaks\n      URL.revokeObjectURL(prev[index]);\n      return newUrls;\n    });\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.fkproduto || !formData.tombamento) {\n      return;\n    }\n\n    try {\n      const submitFormData = new FormData();\n      \n      Object.entries(formData).forEach(([key, value]) => {\n        if (value) {\n          submitFormData.append(key, value);\n        }\n      });\n\n      selectedFiles.forEach(file => {\n        submitFormData.append('photos', file);\n      });\n\n      if (editingItem) {\n        await updateTombamento.mutateAsync({ id: editingItem.pktombamento, formData: submitFormData });\n      } else {\n        await createTombamento.mutateAsync(submitFormData);\n      }\n      onClose();\n      \n      // Clean up preview URLs\n      previewUrls.forEach(url => URL.revokeObjectURL(url));\n      setPreviewUrls([]);\n      setSelectedFiles([]);\n    } catch (error) {\n      console.error(\"Error saving tombamento:\", error);\n    }\n  };\n\n  const isLoading = createTombamento.isPending || updateTombamento.isPending;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"tombamento-modal\">\n        <DialogHeader>\n          <DialogTitle>\n            {editingItem ? \"Editar Tombamento\" : \"Novo Tombamento\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"fkproduto\" className=\"text-sm font-medium text-foreground\">\n                Produto *\n              </Label>\n              <Select\n                value={formData.fkproduto}\n                onValueChange={(value) => setFormData({ ...formData, fkproduto: value })}\n                required\n              >\n                <SelectTrigger data-testid=\"select-produto\">\n                  <SelectValue placeholder=\"Selecione um produto\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {produtos.map((produto: any) => (\n                    <SelectItem key={produto.pkproduto} value={produto.pkproduto.toString()}>\n                      {produto.nome}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"tombamento\" className=\"text-sm font-medium text-foreground\">\n                Número de Tombamento *\n              </Label>\n              <Input\n                id=\"tombamento\"\n                type=\"text\"\n                value={formData.tombamento}\n                onChange={(e) => setFormData({ ...formData, tombamento: e.target.value })}\n                placeholder=\"Ex: TB-001234\"\n                required\n                data-testid=\"input-tombamento\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"serial\" className=\"text-sm font-medium text-foreground\">\n                Número Serial\n              </Label>\n              <Input\n                id=\"serial\"\n                type=\"text\"\n                value={formData.serial}\n                onChange={(e) => setFormData({ ...formData, serial: e.target.value })}\n                placeholder=\"Ex: LG24MK430H-B\"\n                data-testid=\"input-serial\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"responsavel\" className=\"text-sm font-medium text-foreground\">\n                Responsável\n              </Label>\n              <Input\n                id=\"responsavel\"\n                type=\"text\"\n                value={formData.responsavel}\n                onChange={(e) => setFormData({ ...formData, responsavel: e.target.value })}\n                placeholder=\"Nome do responsável\"\n                data-testid=\"input-responsavel\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"status\" className=\"text-sm font-medium text-foreground\">\n              Status\n            </Label>\n            <Select\n              value={formData.status}\n              onValueChange={(value) => setFormData({ ...formData, status: value })}\n            >\n              <SelectTrigger data-testid=\"select-status\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"disponivel\">Disponível</SelectItem>\n                <SelectItem value=\"alocado\">Alocado</SelectItem>\n                <SelectItem value=\"manutencao\">Manutenção</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label className=\"text-sm font-medium text-foreground mb-2 block\">\n              Fotos do Item\n            </Label>\n            <div className=\"border-2 border-dashed border-border rounded-lg p-6 text-center\">\n              <input\n                type=\"file\"\n                multiple\n                accept=\"image/*\"\n                onChange={handleFileChange}\n                className=\"hidden\"\n                id=\"photo-upload\"\n                data-testid=\"file-input\"\n              />\n              <label htmlFor=\"photo-upload\" className=\"cursor-pointer\">\n                <Upload className=\"mx-auto h-12 w-12 text-muted-foreground mb-2\" />\n                <p className=\"text-sm text-muted-foreground\">\n                  <span className=\"font-medium text-primary hover:text-primary/80\">Clique para fazer upload</span> ou arraste as fotos aqui\n                </p>\n                <p className=\"text-xs text-muted-foreground\">PNG, JPG, WEBP até 10MB cada</p>\n              </label>\n            </div>\n\n            {/* Photo Previews */}\n            {previewUrls.length > 0 && (\n              <div className=\"mt-4 grid grid-cols-2 md:grid-cols-4 gap-4\">\n                {previewUrls.map((url, index) => (\n                  <div key={index} className=\"relative group\">\n                    <img\n                      src={url}\n                      alt={`Preview ${index + 1}`}\n                      className=\"w-full h-20 object-cover rounded-lg\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      className=\"absolute -top-2 -right-2 h-6 w-6 rounded-full p-0 opacity-0 group-hover:opacity-100\"\n                      onClick={() => removeFile(index)}\n                      data-testid={`remove-photo-${index}`}\n                    >\n                      <X className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              disabled={isLoading}\n              data-testid=\"button-cancel\"\n            >\n              Cancelar\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isLoading || !formData.fkproduto || !formData.tombamento}\n              data-testid=\"button-save\"\n            >\n              {isLoading ? \"Salvando...\" : editingItem ? \"Atualizar Tombamento\" : \"Criar Tombamento\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10135},"client/src/components/modals/TransferenciaModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useCreateTransferencia, useAlocacoes, useUnidadesSaude, useSetores } from \"@/hooks/usePatrimonio\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface TransferenciaModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingItem?: any;\n}\n\nexport default function TransferenciaModal({ isOpen, onClose, editingItem }: TransferenciaModalProps) {\n  const [formData, setFormData] = useState({\n    fktombamento: \"\",\n    fkunidadesaude_origem: \"\",\n    fkunidadesaude_destino: \"\",\n    fksetor_origem: \"\",\n    fksetor_destino: \"\",\n    responsavel_destino: \"\",\n    datatasnferencia: \"\",\n    responsavel: \"\",\n  });\n\n  const { data: alocacoes = [] } = useAlocacoes();\n  const { data: unidades = [] } = useUnidadesSaude();\n  const { data: setores = [] } = useSetores();\n  const createTransferencia = useCreateTransferencia();\n\n  useEffect(() => {\n    if (editingItem) {\n      setFormData({\n        fktombamento: editingItem.fktombamento?.toString() || \"\",\n        fkunidadesaude_origem: editingItem.fkunidadesaude_origem?.toString() || \"\",\n        fkunidadesaude_destino: editingItem.fkunidadesaude_destino?.toString() || \"\",\n        fksetor_origem: editingItem.fksetor_origem?.toString() || \"\",\n        fksetor_destino: editingItem.fksetor_destino || \"\",\n        responsavel_destino: editingItem.responsavel_destino || \"\",\n        datatasnferencia: editingItem.datatasnferencia ? new Date(editingItem.datatasnferencia).toISOString().split('T')[0] : \"\",\n        responsavel: editingItem.responsavel || \"\",\n      });\n    } else {\n      const today = new Date().toISOString().split('T')[0];\n      setFormData({\n        fktombamento: \"\",\n        fkunidadesaude_origem: \"\",\n        fkunidadesaude_destino: \"\",\n        fksetor_origem: \"\",\n        fksetor_destino: \"\",\n        responsavel_destino: \"\",\n        datatasnferencia: today,\n        responsavel: \"\",\n      });\n    }\n  }, [editingItem]);\n\n  // When tombamento is selected, auto-fill origem data\n  const handleTombamentoChange = (value: string) => {\n    setFormData(prev => ({ ...prev, fktombamento: value }));\n    \n    const selectedAlocacao = alocacoes.find((a: any) => a.fktombamento.toString() === value);\n    if (selectedAlocacao) {\n      setFormData(prev => ({\n        ...prev,\n        fkunidadesaude_origem: selectedAlocacao.fkunidadesaude?.toString() || \"\",\n        fksetor_origem: selectedAlocacao.fksetor?.toString() || \"\",\n      }));\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.fktombamento || !formData.fkunidadesaude_destino || !formData.datatasnferencia) {\n      return;\n    }\n\n    // Validate that origem and destino are different\n    if (formData.fkunidadesaude_origem === formData.fkunidadesaude_destino) {\n      alert(\"A unidade de origem deve ser diferente da unidade de destino.\");\n      return;\n    }\n\n    try {\n      const submitData = {\n        ...formData,\n        fktombamento: parseInt(formData.fktombamento),\n        fkunidadesaude_origem: formData.fkunidadesaude_origem ? parseInt(formData.fkunidadesaude_origem) : undefined,\n        fkunidadesaude_destino: parseInt(formData.fkunidadesaude_destino),\n        fksetor_origem: formData.fksetor_origem ? parseInt(formData.fksetor_origem) : undefined,\n        datatasnferencia: formData.datatasnferencia,\n      };\n\n      await createTransferencia.mutateAsync(submitData);\n      onClose();\n    } catch (error) {\n      console.error(\"Error saving transferencia:\", error);\n    }\n  };\n\n  const isLoading = createTransferencia.isPending;\n\n  // Get the selected origem info for display\n  const selectedTombamento = alocacoes.find((a: any) => a.fktombamento.toString() === formData.fktombamento);\n  const origemUnidade = unidades.find((u: any) => u.pkunidadesaude.toString() === formData.fkunidadesaude_origem);\n  const origemSetor = setores.find((s: any) => s.pksetor.toString() === formData.fksetor_origem);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"transferencia-modal\">\n        <DialogHeader>\n          <DialogTitle>\n            {editingItem ? \"Editar Transferência\" : \"Nova Transferência\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"fktombamento\" className=\"text-sm font-medium text-foreground\">\n              Item Tombado *\n            </Label>\n            <Select\n              value={formData.fktombamento}\n              onValueChange={handleTombamentoChange}\n              required\n            >\n              <SelectTrigger data-testid=\"select-tombamento\">\n                <SelectValue placeholder=\"Selecione um item para transferir\" />\n              </SelectTrigger>\n              <SelectContent>\n                {alocacoes.map((alocacao: any) => (\n                  <SelectItem key={alocacao.pkalocacao} value={alocacao.fktombamento.toString()}>\n                    {alocacao.tombamento?.tombamento} - {alocacao.tombamento?.produto?.nome} \n                    ({alocacao.unidadesaude?.nome})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Origem Information Display */}\n          {selectedTombamento && (\n            <div className=\"bg-muted p-4 rounded-lg\">\n              <h4 className=\"text-sm font-medium text-foreground mb-2\">Localização Atual (Origem)</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\n                <div>\n                  <span className=\"text-muted-foreground\">Unidade: </span>\n                  <span className=\"text-foreground\">{origemUnidade?.nome || \"Não informado\"}</span>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Setor: </span>\n                  <span className=\"text-foreground\">{origemSetor?.nome || \"Não informado\"}</span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"fkunidadesaude_destino\" className=\"text-sm font-medium text-foreground\">\n                Unidade de Destino *\n              </Label>\n              <Select\n                value={formData.fkunidadesaude_destino}\n                onValueChange={(value) => setFormData({ ...formData, fkunidadesaude_destino: value })}\n                required\n              >\n                <SelectTrigger data-testid=\"select-unidade-destino\">\n                  <SelectValue placeholder=\"Selecione a unidade de destino\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {unidades\n                    .filter((u: any) => u.pkunidadesaude.toString() !== formData.fkunidadesaude_origem)\n                    .map((unidade: any) => (\n                    <SelectItem key={unidade.pkunidadesaude} value={unidade.pkunidadesaude.toString()}>\n                      {unidade.nome}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"fksetor_destino\" className=\"text-sm font-medium text-foreground\">\n                Setor de Destino\n              </Label>\n              <Select\n                value={formData.fksetor_destino}\n                onValueChange={(value) => setFormData({ ...formData, fksetor_destino: value })}\n              >\n                <SelectTrigger data-testid=\"select-setor-destino\">\n                  <SelectValue placeholder=\"Selecione o setor (opcional)\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {setores.map((setor: any) => (\n                    <SelectItem key={setor.pksetor} value={setor.pksetor.toString()}>\n                      {setor.nome}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"responsavel_destino\" className=\"text-sm font-medium text-foreground\">\n                Responsável no Destino\n              </Label>\n              <Input\n                id=\"responsavel_destino\"\n                type=\"text\"\n                value={formData.responsavel_destino}\n                onChange={(e) => setFormData({ ...formData, responsavel_destino: e.target.value })}\n                placeholder=\"Nome do responsável\"\n                data-testid=\"input-responsavel-destino\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"datatasnferencia\" className=\"text-sm font-medium text-foreground\">\n                Data da Transferência *\n              </Label>\n              <Input\n                id=\"datatasnferencia\"\n                type=\"date\"\n                value={formData.datatasnferencia}\n                onChange={(e) => setFormData({ ...formData, datatasnferencia: e.target.value })}\n                required\n                data-testid=\"input-data-transferencia\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"responsavel\" className=\"text-sm font-medium text-foreground\">\n              Responsável pela Transferência\n            </Label>\n            <Input\n              id=\"responsavel\"\n              type=\"text\"\n              value={formData.responsavel}\n              onChange={(e) => setFormData({ ...formData, responsavel: e.target.value })}\n              placeholder=\"Nome do responsável\"\n              data-testid=\"input-responsavel\"\n            />\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              disabled={isLoading}\n              data-testid=\"button-cancel\"\n            >\n              Cancelar\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isLoading || !formData.fktombamento || !formData.fkunidadesaude_destino || !formData.datatasnferencia}\n              data-testid=\"button-save\"\n            >\n              {isLoading ? \"Salvando...\" : \"Criar Transferência\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10807},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}